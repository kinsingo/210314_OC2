
:#include<MFG_Scriptv01.lib>

#define  MODEL_ADDR->(01) ;
#define  MODEL_NAME "VH_H12F_SP_DP213_BLACK_201228_GI_G2G_T1_AutoCode";

#ifndef _LcdInfo_
	//-----------------------------------------------------------------------------------------------------------------------
	m_LCD_IF_MODE->(8);		//	1:CPU,2:RGB,3:MIPI,4:LVDS	7:MIPI DUAL
	m_IO_VOLT_LEVEL->(185);	// 	1.8v:1	, 3.3V:4
	m_SPI_IOLEVEL->(185);
	//-----------------------------------------------------------------------------------------------------------------------
	m_DOTCLK->(803);	
	m_RGB_H_SIZE->(1228);
	m_RGB_V_SIZE->(2700);

	// VACT HACT FPS VBP VFP HBP HFP VSA HSA
	// 2700 1228 60  8  100 24  24   4   12
	m_HSYNC_WIDTH->(12);
	m_H_FRONTPORCH->(24);
	m_H_BACKPORCH->(24);	

	m_VSYNC_WIDTH->(4);		
	m_V_FRONTPORCH->(100);	 
	m_V_BACKPORCH->(8);

	m_DCLK_POLARITY->(0);
	m_H_POLARITY->(0);		// 0: Low enable 1: High Enable
	m_V_POLARITY->(0);		// 0: Low enable 1: High Enable
	m_DE->(1);				// 0: Low Enable 1: High Enable
	//-----------------------------------------------------------------------------------------------------------------------
	m_SPI_INF->(3,50);		//1 8Bit //2 :16Bit	// 3: 9Bit		//50 : 200khz, 100 : 100kHz
	//-----------------------------------------------------------------------------------------------------------------------
	m_PWM_INF->(1, 2000,100);
	m_PWM_INF->(2, 2000,100);
	//-----------------------------------------------------------------------------------------------------------------------
	m_PAT_INF->(1,1,8);
	m_PAT_INF->(1,77,77);
	//-----------------------------------------------------------------------------------------------------------------------
	m_RGB_MODE->(1);
	//-----------------------------------------------------------------------------------------------------------------------
#endif

void main() {
	
*[SEQ1]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_FUNC_CMDW->(ALL,1, 0x26,0x06,0x01,0x00); // VDDD Flag On
		//-----------------------------------------------------------------------------------------------------------------------
		// Power Off sequence
		f_CURRENT_MEASURE->(ALL, OFF);
		f_DELAY_MS->(100);
		q_Sleep_IN();
		q_Power_OFF();
		//-----------------------------------------------------------------------------------------------------------------------
		q_IO_All_OFF();
		//-----------------------------------------------------------------------------------------------------------------------
		f_SOL_AIR->(1, ON);
 		f_SOL_AIR->(5, OFF);     //up	
	 	f_SOL_AIR->(3, ON);	//down 
	 	f_SOL_AIR->(4, ON);
		f_DELAY_MS->(800);
	
		f_SOL_AIR->(2, OFF);     //backward
		f_SOL_AIR->(1, ON);    //forward
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		f_FUNC_CMDW->(ALL,1, 0x16,0x00);// m_LCD_SYNC_INFO()
		f_DELAY_MS->(5);
		//-----------------------------------------------------------------------------------------------------------------------
		f_DISCHARGE->(ALL, 1);
		f_MIPI_BD_RESET->(OFF);
		//-----------------------------------------------------------------------------------------------------------------------
		
		f_MSG "Device Initial(1)";	
	}*end

*[SEQ2]
	{	
		//-----------------------------------------------------------------------------------------------------------------------
		// Power set Q_Fun not use
		f_VBAT->(ALL, 500); //VPP
		f_VLCD->(ALL, 310);	// VPNL(VCI)
		f_VEXT->(ALL, 195);	// VDDI
		f_VCC->(ALL, 330);	// T_AVDD
		f_VBL->(ALL, 1000);	// VBAT
		
		f_IBAT->(ALL, 1, 500000, 000); 
		f_ILCD->(ALL, 2, 100000, 000);  
		f_IEXT->(ALL, 2, 180000, 000); 
		f_ICC->(ALL, 2, 100000, 000); 
		f_IBL->(ALL, 1, 1200000, 000); 
		f_INEG1->(ALL, 1, 1, 0);
		f_CURRENT_MEASURE->(ALL, OFF);
		//-----------------------------------------------------------------------------------------------------------------------
		f_SOL_AIR->(1, OFF);    //forward  Enable
		f_SOL_AIR->(2, ON);     //backward Disable
		f_DELAY_MS->(200);
		//-----------------------------------------------------------------------------------------------------------------------		
		//xf_SPECIAL_FUNC->(0xA3, 0x02, 0x00, 0x00, 0x00);	//	Check Probe Forward		
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Cylinder Forward"; 
		f_KEY_FORWARD->(1);		
	}*end

*[SEQ3]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_SOL_AIR->(5,ON); //UP
		f_SOL_AIR->(3,OFF); //Down
		f_DELAY_MS->(500);
		//-----------------------------------------------------------------------------------------------------------------------
			
		xf_SPECIAL_FUNC->(0xF0, 0x00, 0x00, 0x00, 0x00);	//	timer Start
		//xf_SPECIAL_FUNC->(0xA3, 0x01, 0x00, 0x00, 0x00);	//	Check Probe down
		//-----------------------------------------------------------------------------------------------------------------------
       		 f_MSG "Cylinder Down"; 
		f_KEY_FORWARD->(1);		
	}*end
	
*[SEQ4]
	{	
		f_POWER_VBAT->(ALL, ON);
		f_DELAY_MS->(1000);	
		//-----------------------------------------------------------------------------------------------------------------------
		q_Vddd_Power_SET();
		q_Vddd_Flag_SET();
		//-----------------------------------------------------------------------------------------------------------------------
		q_Carrier_SET();
		//-----------------------------------------------------------------------------------------------------------------------
		f_CURRENT_MEASURE->(ALL, OFF);
		f_DELAY_MS->(20);
		//-----------------------------------------------------------------------------------------------------------------------
		q_Power_ON();
		//-----------------------------------------------------------------------------------------------------------------------
		f_PORT_EXT3->(ALL, ON);			// Power IC Sensing	
		//-----------------------------------------------------------------------------------------------------------------------
		q_MDM_INIT();
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "MIPI SET"; 	
		f_KEY_FORWARD->(1);
		
	}*end

*[SEQ5]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		//q_SEQUENCE_01();
		//q_SEQUENCE_02();
		//q_SEQUENCE_03();
		//q_SEQUENCE_04();
		//q_SEQUENCE_05();
		//q_SEQUENCE_06();
		//q_SEQUENCE_07();
		//q_SEQUENCE_08();	
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "POLED INIT1"; 	
		f_KEY_FORWARD->(1);
	}*end
	
*[SEQ6]
	{
		//q_SEQUENCE_09();
		//q_SEQUENCE_10();
		//q_SEQUENCE_11();
		//q_SEQUENCE_12();
		//q_SEQUENCE_13();
		//q_SEQUENCE_14();
		//q_SEQUENCE_15();
		//q_SEQUENCE_16();
	
		f_MSG "POLED INIT2"; 	
		f_KEY_FORWARD->(1);	
	}*end

*[SEQ7]
	{
		//q_SEQUENCE_17();  
		//q_SEQUENCE_18();
		//q_SEQUENCE_19();
		//q_SEQUENCE_20();
		//q_SEQUENCE_21();
		f_DELAY_MS->(100);

		//mipi.write 0x39 0xB0 0x1A # Para Offset : 27
		//f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		//f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x1A);

		//mipi.write 0x39 0xE7 0x00 0x06 # Manual version 0.6 for PPV2 (OD 0x51 setting O)
		//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
		//f_REG_CMDW->(ALL, 1, 0x53, 0xE7, 0x00,0x06);
			
		//-----------------------------------------------------------------------------------------------------------------------
		//f_REG_CMDW->(ALL, 1, 0x40, 0x50, 0x00);	
		//f_PATTERN->(ALL, 1, 2, "Black");	
		//f_DELAY_MS->(300);	
		//f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);
		//f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		q_AUTOCODE_01();
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		//mipi.write 0x15 0xC6 0x00 # POCB OFF (POCB + Function off)
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xC6, 0x00);
		//-----------------------------------------------------------------------------------------------------------------------

		f_PATTERN->(ALL, 1, 6, "Green");	
		f_DELAY_MS->(300);	
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);
		f_DELAY_MS->(100);	
		f_DELAY_MS->(1000);

		q_DISPLAY_ON();
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "POLED INIT3"; 	
		//f_KEY_FORWARD->(1);	
	}*end


*[SEQ8]
	{			
		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA1, 0x09, 0x02, 0x00, 0x00);  //BCR
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Read BCR";
		f_KEY_FORWARD->(1); 
		
	}*end
	
*[SEQ9]
	{	
		//mipi.write 0x39 0xB0 0x2D # Para Offset : 45
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x2D);

		//mipi.write 0x39 0xB3 0x03 0xFF 0xE8 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0xA6 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x07 0xFF 0x20 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P76~90 B 	VREF0 바꾸면서 초기값 변경(200812)
		f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB3, 0x03, 0xFF, 0xE8, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x07, 0xFF, 0x20, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x07, 0xFF, 0x20, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);

		//mipi.write 0x39 0xB0 0x2D # Para Offset : 45
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x2D);

		//mipi.write 0x39 0xB6 0x03 0xFF 0x8B 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0x59 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x03 0xFF 0xCC 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P76~90 B 
		f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB6, 0x03, 0xFF, 0x8B, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x07, 0xFF, 0x20, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x03, 0xFF, 0xCC, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);

		//mipi.write 0x39 0xB0 0x22 # Para Offset : 34
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x22);

		//mipi.write 0x39 0xB1 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 
		f_REG_CMDW->(ALL, 1, 0x50, 0x6D, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB1, 0xFF, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0x6E, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0, 0xFF, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0x6E, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0, 0xFF, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0x6E, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0, 0xFE, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0xA6, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0, 0xFE, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0xA6, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0, 0xFE, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0xA6, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0);	
	
		//-----------------------------------------------------------------------------------------------------------------------
		f_PATTERN->(ALL, 1, 6, "Green");	
		f_DELAY_MS->(300);	
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);
		f_DELAY_MS->(100);	
		f_DELAY_MS->(1000);
		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA4, 0x03, 0x00, 0x00, 0x00);  //Green Verify
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Contact Check";
		//f_KEY_FORWARD->(1);		
	}*end

*[SEQ10]
	{	
		//-----------------------------------------------------------------------------------------------------------------------
		xf_SPECIAL_FUNC->(0xA1, 0x0A, 0x00, 0x00, 0x00);  //ELVSS
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "ELVSS COMPENSATION"; 	
		f_KEY_FORWARD->(1);	
		
	}*end
	
	
	
*[SEQ11]
	{
		//xf_SPECIAL_FUNC->(0xA4, 0x08, 0x00, 0x00, 0x00);//FLASH CRC
		f_MSG "Flash Read"; 		
		f_KEY_FORWARD->(1);	
	}*end


*[SEQ12]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_CURRENT_MEASURE->(ALL, OFF);
		f_DELAY_MS->(100);
		q_Sleep_IN();
		q_Power_OFF();
		//-----------------------------------------------------------------------------------------------------------------------
		q_IO_All_OFF();
		f_DELAY_MS->(1000);
		f_DELAY_MS->(1000);
		f_DELAY_MS->(1000);
		f_DELAY_MS->(1000);
		f_DELAY_MS->(1000);
		f_DELAY_MS->(1000);
		f_DELAY_MS->(1000);
		f_DELAY_MS->(1000);
		f_DELAY_MS->(1000);
		f_DELAY_MS->(1000);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "POWER OFF"; 
		f_KEY_FORWARD->(1);
	}*end

*[SEQ13]
	{	
		f_POWER_VBAT->(ALL, ON);
		f_DELAY_MS->(1000);	
		//-----------------------------------------------------------------------------------------------------------------------
		q_Vddd_Power_SET();
		q_Vddd_Flag_SET();
		//-----------------------------------------------------------------------------------------------------------------------
		q_Carrier_SET();
		//-----------------------------------------------------------------------------------------------------------------------
		f_CURRENT_MEASURE->(ALL, OFF);
		f_DELAY_MS->(20);
		//-----------------------------------------------------------------------------------------------------------------------
		q_Power_ON();
		//-----------------------------------------------------------------------------------------------------------------------
		f_PORT_EXT3->(ALL, ON);			// Power IC Sensing	
		//-----------------------------------------------------------------------------------------------------------------------
		q_MDM_INIT();
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "MIPI SET"; 	
		f_KEY_FORWARD->(1);
		
	}*end

*[SEQ14]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		q_SEQUENCE_01();
		q_SEQUENCE_02();
		q_SEQUENCE_03();
		q_SEQUENCE_04();
		q_SEQUENCE_05();
		q_SEQUENCE_06();
		q_SEQUENCE_07();
		q_SEQUENCE_08();	
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "POLED INIT1"; 	
		f_KEY_FORWARD->(1);
	}*end
	
*[SEQ15]
	{
		q_SEQUENCE_09();
		q_SEQUENCE_10();
		q_SEQUENCE_11();
		q_SEQUENCE_12();
		q_SEQUENCE_13();
		q_SEQUENCE_14();
		q_SEQUENCE_15();
		q_SEQUENCE_16();
	
		f_MSG "POLED INIT2"; 	
		f_KEY_FORWARD->(1);	
	}*end

*[SEQ16]
	{
		q_SEQUENCE_17();  
		q_SEQUENCE_18();
		q_SEQUENCE_19();
		q_SEQUENCE_20();
		q_SEQUENCE_21();
		f_DELAY_MS->(100);

		//mipi.write 0x39 0xB0 0x16 # Para Offset : 27
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x16);

		//mipi.write 0x39 0xE7 0x01 0x0D 0xD6 0x56 0x00 0x09 # Manual version 0.9 for YRT3
		f_REG_CMDW->(ALL, 1, 0x50, 0x07, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xE7, 0x01, 0x0D, 0xD6, 0x56, 0x00, 0x09);
				
		//-----------------------------------------------------------------------------------------------------------------------
		//f_REG_CMDW->(ALL, 1, 0x40, 0x50, 0x00);	
		f_PATTERN->(ALL, 1, 2, "Black");	
		f_DELAY_MS->(300);	
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		q_DISPLAY_ON();
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "POLED INIT3"; 	
		f_KEY_FORWARD->(1);	
	}*end


*[SEQ17]
	{	
		//mipi.write 0x39 0xB0 0x2D # Para Offset : 45
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x2D);

		//mipi.write 0x39 0xB3 0x03 0xFF 0xE8 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0xA6 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x07 0xFF 0x20 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P76~90 B 	VREF0 바꾸면서 초기값 변경(200812)
		f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB3, 0x03, 0xFF, 0xE8, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x07, 0xFF, 0x20, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x07, 0xFF, 0x20, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);

		//mipi.write 0x39 0xB0 0x2D # Para Offset : 45
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x2D);

		//mipi.write 0x39 0xB6 0x03 0xFF 0x8B 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0x59 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x03 0xFF 0xCC 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P76~90 B 
		f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB6, 0x03, 0xFF, 0x8B, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x07, 0xFF, 0x20, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x03, 0xFF, 0xCC, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);
	
		//-----------------------------------------------------------------------------------------------------------------------
		f_PATTERN->(ALL, 1, 6, "Green");	
		f_DELAY_MS->(300);	
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);
		f_DELAY_MS->(100);	
		f_DELAY_MS->(1000);
		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA4, 0x03, 0x00, 0x00, 0x00);  //Green Verify
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Contact Check";
		f_KEY_FORWARD->(1);		
	}*end

*[SEQ18]
	{
		//mipi.write 0x39 0xB0 0x2D # Para Offset : 45
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x2D);

		//mipi.write 0x39 0xB3 0x03 0xFF 0xE8 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0xA6 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x07 0xFF 0x20 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P76~90 B 	VREF0 바꾸면서 초기값 변경(200812)
		f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB3, 0x03, 0xFF, 0xE8, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x03, 0xFF, 0xA6, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x07, 0xFF, 0x20, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);

		//mipi.write 0x39 0xB0 0x2D # Para Offset : 45
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x2D);

		//mipi.write 0x39 0xB6 0x03 0xFF 0x8B 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0x59 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x03 0xFF 0xCC 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P76~90 B 
		f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB6, 0x03, 0xFF, 0x8B, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x03, 0xFF, 0x59, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x03, 0xFF, 0xCC, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);

		//-----------------------------------------------------------------------------------------------------------------------
		f_PATTERN->(ALL, 1, 2, "Black");
		f_DELAY_MS->(200);		
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);		
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA2, 0x04, 0x04, 0x00, 0x00);	//	measure ca310	para3 - 0:white, 1:red, 2:green, 3:blue 4:black
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "PAT Black";
		f_KEY_FORWARD->(1); 
		
	}*end

*[SEQ19]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_PATTERN->(ALL, 1, 5, "Red");
		f_DELAY_MS->(200);		
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);		
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA2, 0x01, 0x01, 0x00, 0x00);	//	measure ca310	para3 - 0:white, 1:red, 2:green, 3:blue 4:black
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "PAT Red";
		f_KEY_FORWARD->(1); 
		
	}*end

*[SEQ20]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_PATTERN->(ALL, 1, 6, "Green");
		f_DELAY_MS->(200);			
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);		
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA2, 0x02, 0x02, 0x00, 0x00);	//	measure ca310	para3 - 0:white, 1:red, 2:green, 3:blue 4:black
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "PAT Green"; 
		f_KEY_FORWARD->(1);
	}*end

*[SEQ21]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_PATTERN->(ALL, 1, 7, "Blue");	
		f_DELAY_MS->(200);		
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);		
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA2, 0x03, 0x03, 0x00, 0x00);	//	measure ca310	para3 - 0:white, 1:red, 2:green, 3:blue 4:black
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "PAT Blue"; 
		f_KEY_FORWARD->(1);
	}*end

*[SEQ22]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_PATTERN->(ALL, 1, 4, "White");	
		f_DELAY_MS->(200);		
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);		
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA2, 0x00, 0x00, 0x00, 0x00);	//	measure ca310	para3 - 0:white, 1:red, 2:green, 3:blue 4:black
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "PAT White"; 
		f_KEY_FORWARD->(1);
	}*end

*[SEQ23]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA1, 0x04, 0x00, 0x00, 0x00);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Write FOG_ID";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ24]
	{

		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA1, 0x02, 0x00, 0x00, 0x00);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Write 2D Label";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ25]
	{

		//-----------------------------------------------------------------------------------------------------------------------
		//xf_SPECIAL_FUNC->(0xA1, 0x05, 0x00, 0x00, 0x00);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Write Process Info";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ26]
	{
		//mipi.write 0x15 0xC6 0x00 # POCB OFF (POCB + Function off)
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xC6, 0x00);
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		xf_SPECIAL_FUNC->(0xA1, 0x00, 0x00, 0x00, 0x00);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Compensation";
		f_KEY_FORWARD->(1); 	
	}*end			
	
*[SEQ27]
	{			
		//mipi.write 0x15 0xC6 0xCD 0x82 0x04 0x04 0x04 0x04 0x04 0x04  # POCB On (Dirty mura 개선)
		f_REG_CMDW->(ALL, 1, 0x50, 0x09, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xC6, 0xCD, 0x82, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04);
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		xf_SPECIAL_FUNC->(0x31, 0x00, 0x00, 0x00, 0x00);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "OTP WRITE";
		f_KEY_FORWARD->(1); 		
	}*end

*[SEQ28]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_CURRENT_MEASURE->(ALL, OFF);
		f_DELAY_MS->(100);
		q_Sleep_IN();
		q_Power_OFF();
		//-----------------------------------------------------------------------------------------------------------------------
		q_IO_All_OFF();
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "POWER OFF"; 
		f_KEY_FORWARD->(1);
	}*end

*[SEQ29]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_DELAY_MS->(500);
		f_POWER_VBAT->(ALL, ON);
		f_DELAY_MS->(1000);
		//-----------------------------------------------------------------------------------------------------------------------
		q_Vddd_Power_SET();
		q_Vddd_Flag_SET();
		//-----------------------------------------------------------------------------------------------------------------------
		q_Carrier_SET();
		//-----------------------------------------------------------------------------------------------------------------------
		f_CURRENT_MEASURE->(ALL, OFF);
		f_DELAY_MS->(20);
		//-----------------------------------------------------------------------------------------------------------------------
		q_Power_ON();
		//-----------------------------------------------------------------------------------------------------------------------
		f_PORT_EXT3->(ALL, ON);			// Power IC Sensing	
		//-----------------------------------------------------------------------------------------------------------------------
		q_MDM_INIT();
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "MIPI SET"; 
		f_KEY_FORWARD->(1);
	}*end

*[SEQ30]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		q_AUTOCODE_01();
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		//mipi.write 0x15 0xC6 0x00 # POCB OFF (POCB + Function off)
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xC6, 0x00);

		f_MSG "LCM INIT1"; 	
		f_KEY_FORWARD->(1);

	}*end

*[SEQ31]
	{
		f_REG_CMDW->(ALL, 1, 0x40, 0x50, 0x00);	
		f_PATTERN->(ALL, 1, 2, "Black");	
		f_DELAY_MS->(300);	
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		q_DISPLAY_ON();
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "LCM INIT2"; 	
		f_KEY_FORWARD->(1);	

	}*end

*[SEQ32]
	{		
		//-----------------------------------------------------------------------------------------------------------------------
		xf_SPECIAL_FUNC->(0x31, 0x01, 0x00, 0x00, 0x00);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "AFTER CRC Check";
		f_KEY_FORWARD->(1); 		
	}*end

*[SEQ33]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		xf_SPECIAL_FUNC->(0xA1, 0x04, 0x01, 0x00, 0x00);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Verify FOG_ID";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ34]
	{

		//-----------------------------------------------------------------------------------------------------------------------
		xf_SPECIAL_FUNC->(0xA1, 0x03, 0x00, 0x00, 0x00);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Verify 2D Label";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ35]
	{

		//-----------------------------------------------------------------------------------------------------------------------
		xf_SPECIAL_FUNC->(0xA1, 0x05, 0x01, 0x00, 0x00);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "Verify Process Info";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ36]
	{
		xf_SPECIAL_FUNC->(0xA1, 0x01, 0x00, 0x00, 0x00);
		f_MSG "OTP Verify";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ37]
	{
		//xf_SPECIAL_FUNC->(0xA1, 0x0D, 0x00, 0x00, 0x00);
		 f_MSG "ELVSS Verify";  
		 f_KEY_FORWARD->(1); 	
	}*end


*[SEQ38]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_CURRENT_MEASURE->(ALL, OFF);
		f_DELAY_MS->(100);
		q_Sleep_IN();
		q_Power_OFF();
		//-----------------------------------------------------------------------------------------------------------------------
		q_IO_All_OFF();
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "POWER OFF"; 
		f_KEY_FORWARD->(1);
	}*end

*[SEQ39]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_DELAY_MS->(500);
		f_POWER_VBAT->(ALL, ON);
		f_DELAY_MS->(1000);
		//-----------------------------------------------------------------------------------------------------------------------
		q_Vddd_Power_SET();
		q_Vddd_Flag_SET();
		//-----------------------------------------------------------------------------------------------------------------------
		q_Carrier_SET();
		//-----------------------------------------------------------------------------------------------------------------------
		f_CURRENT_MEASURE->(ALL, OFF);
		f_DELAY_MS->(20);
		//-----------------------------------------------------------------------------------------------------------------------
		q_Power_ON();
		//-----------------------------------------------------------------------------------------------------------------------
		f_PORT_EXT3->(ALL, ON);			// Power IC Sensing	
		//-----------------------------------------------------------------------------------------------------------------------
		q_MDM_INIT();
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "MIPI SET"; 
		f_KEY_FORWARD->(1);
	}*end

*[SEQ40]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		q_AUTOCODE_01();
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		//mipi.write 0x15 0xC6 0x00 # POCB OFF (POCB + Function off)
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xC6, 0x00);

		f_MSG "LCM INIT1"; 	
		f_KEY_FORWARD->(1);

	}*end

*[SEQ41]
	{
		f_REG_CMDW->(ALL, 1, 0x40, 0x50, 0x00);	
		f_PATTERN->(ALL, 1, 2, "Black");	
		f_DELAY_MS->(300);	
		f_REG_CMDW->(ALL, 1, 0x3D, 0x86, 0x00);
		f_DELAY_MS->(100);
		//-----------------------------------------------------------------------------------------------------------------------
		q_DISPLAY_ON();
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "LCM INIT2"; 	
		f_KEY_FORWARD->(1);	

	}*end


*[SEQ42]
	{
		xf_SPECIAL_FUNC->(0xA1, 0x09, 0x00, 0x00, 0x00);
		f_MSG "Delta E23_Mode1";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ43]
	{
		xf_SPECIAL_FUNC->(0xA1, 0x09, 0x01, 0x00, 0x00);
		f_MSG "Delta E23_Mode2";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ44]
	{
		xf_SPECIAL_FUNC->(0xA1, 0x09, 0x02, 0x00, 0x00);
		f_MSG "Delta E4";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ45]
	{
		xf_SPECIAL_FUNC->(0xA1, 0x07, 0x00, 0x00, 0x00);
		f_MSG "Difference Check";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ46]
	{
		xf_SPECIAL_FUNC->(0xA1, 0x06, 0x00, 0x00, 0x00);
		f_MSG "DBV Accuracy";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ47]
	{
		xf_SPECIAL_FUNC->(0xA1, 0x08, 0x00, 0x00, 0x00);
		f_MSG "Gamma Crush";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ48]
	{
		//xf_SPECIAL_FUNC->(0xA1, 0x0C, 0x00, 0x00, 0x00);
		f_MSG "Luminance Variation";
		f_KEY_FORWARD->(1); 	
	}*end

*[SEQ49]
	{
		//-----------------------------------------------------------------------------------------------------------------------
		f_CURRENT_MEASURE->(ALL, OFF);
		f_DELAY_MS->(100);
		q_Sleep_IN();
		q_Power_OFF();
		//-----------------------------------------------------------------------------------------------------------------------
		q_IO_All_OFF();
		//-----------------------------------------------------------------------------------------------------------------------
		f_MSG "POWER OFF"; 
		f_KEY_FORWARD->(1);
	}*end
}_end_main

//------------------------------------------------
//[Function_ROUTINE UNIT]
//------------------------------------------------

void Func_call::q_MDM_INIT(){	
{
	//-----------------------------------------------------------------------------------------------------------------------
	//General Setting
	f_REG_CMDW->(ALL, 1, 0x30, 0x34, 0x00);	
	f_REG_CMDW->(ALL, 1, 0x31, 0x89, 0x00);			
	f_REG_CMDW->(ALL, 1, 0x3C, 0xA0, 0x30);	// spi.write 0x3C 0x30a0
	//-----------------------------------------------------------------------------------------------------------------------
	// VACT HACT FPS VBP VFP HBP HFP VSA HSA
	// 2700 1228 60  8  100 24  24   4   12
	// MIPI Video Timing  
	// HSW=12, VSW=4
	// VBP=8 + 4=0x0C
	// HBP=24 + 12=0x24
	// VFP=100=0x64
	// HFP=24=0x18
	f_REG_CMDW->(ALL, 1, 0x35, 0x0C, 0x04);			
	f_REG_CMDW->(ALL, 1, 0x36, 0x0C, 0x00);			
	f_REG_CMDW->(ALL, 1, 0x37, 0x24, 0x00);			
	f_REG_CMDW->(ALL, 1, 0x38, 0x64, 0x00);			
	f_REG_CMDW->(ALL, 1, 0x39, 0x18, 0x00);					
	//-----------------------------------------------------------------------------------------------------------------------
	f_REG_CMDW->(ALL, 1, 0x3A, 0xCC, 0x04);	 // HACT=1228
	f_REG_CMDW->(ALL, 1, 0x3B, 0x8C, 0x0A);	 // VACT=2700
	//-----------------------------------------------------------------------------------------------------------------------
	// Data Rate=>900Mbps => 20.02.18 
	f_REG_CMDW->(ALL, 1, 0x20, 0x45, 0x01);			
	f_REG_CMDW->(ALL, 1, 0x21, 0x00, 0x2C);			
	f_REG_CMDW->(ALL, 1, 0x22, 0xDA, 0x06);			
	f_REG_CMDW->(ALL, 1, 0x23, 0x00, 0x18);			
	f_REG_CMDW->(ALL, 1, 0x24, 0x03, 0x09);			
	f_REG_CMDW->(ALL, 1, 0x25, 0x41, 0x10);			
	f_REG_CMDW->(ALL, 1, 0x26, 0x37, 0x00);			
	//-----------------------------------------------------------------------------------------------------------------------
	// Global Timing (900Mbps) => 20.02.18
	f_REG_CMDW->(ALL, 1, 0x34, 0x0A, 0x0A);	//KR version
	//f_REG_CMDW->(ALL, 1, 0x34, 0x06, 0x06);	//VH version
	f_REG_CMDW->(ALL, 1, 0x66, 0x0E, 0x06);			
	f_REG_CMDW->(ALL, 1, 0x67, 0x1E, 0x06);			
	f_REG_CMDW->(ALL, 1, 0x68, 0x02, 0x0F);			
	f_REG_CMDW->(ALL, 1, 0x69, 0x08, 0x09);			
	f_REG_CMDW->(ALL, 1, 0x6C, 0x0D, 0x0D);			
	
	
//	f_REG_CMDW->(ALL, 1, 0x34, 0x0A, 0x0A);			
//	f_REG_CMDW->(ALL, 1, 0x66, 0x17, 0x08);			
//	f_REG_CMDW->(ALL, 1, 0x67, 0x29, 0x08);			
//	f_REG_CMDW->(ALL, 1, 0x68, 0x03, 0x30);			
//	f_REG_CMDW->(ALL, 1, 0x69, 0x0B, 0x0F);			
//	f_REG_CMDW->(ALL, 1, 0x6C, 0x0F, 0x0F);			
	
	//-----------------------------------------------------------------------------------------------------------------------
	//-----------------------------------------------------------------------------------------------------------------------		

	f_REG_CMDW->(ALL, 1, 0x80, 0xA1, 0x04);
	f_REG_CMDW->(ALL, 1, 0x85, 0x28, 0x01);

	
	//-----------------------------------------------------------------------------------------------------------------------
	//=======================================================================================
	// DSC Configuration
	//=======================================================================================
	f_REG_CMDW->(ALL, 1, 0x00, 0x01, 0x00); // PAGE 1
	
	f_REG_CMDW->(ALL, 1, 0x21, 0x00, 0x00);
	f_REG_CMDW->(ALL, 1, 0x22, 0x08, 0x00);
	f_REG_CMDW->(ALL, 1, 0x23, 0x01, 0x00);
	f_REG_CMDW->(ALL, 1, 0x24, 0x8C, 0x0A);
	f_REG_CMDW->(ALL, 1, 0x25, 0xCC, 0x04);
	f_REG_CMDW->(ALL, 1, 0x26, 0x1E, 0x00);
	f_REG_CMDW->(ALL, 1, 0x27, 0x66, 0x02);
	f_REG_CMDW->(ALL, 1, 0x28, 0x66, 0x02);
	f_REG_CMDW->(ALL, 1, 0x29, 0x00, 0x02);
	f_REG_CMDW->(ALL, 1, 0x2A, 0x33, 0x02);
	f_REG_CMDW->(ALL, 1, 0x2B, 0x20, 0x00);
	f_REG_CMDW->(ALL, 1, 0x2C, 0x13, 0x03);
	f_REG_CMDW->(ALL, 1, 0x2D, 0x08, 0x00);
	f_REG_CMDW->(ALL, 1, 0x2E, 0x0C, 0x00);
	f_REG_CMDW->(ALL, 1, 0x2F, 0x50, 0x03);
	f_REG_CMDW->(ALL, 1, 0x30, 0xFA, 0x02);
	f_REG_CMDW->(ALL, 1, 0x31, 0x00, 0x18);
	f_REG_CMDW->(ALL, 1, 0x32, 0xF0, 0x10);
	f_REG_CMDW->(ALL, 1, 0x33, 0x0C, 0x03);
	f_REG_CMDW->(ALL, 1, 0x20 ,0x01, 0x01);	// DSC ENCODER EN, SLICE NUM : 2

	
	f_REG_CMDW->(ALL, 1, 0x00, 0x00, 0x00); // PAGE 0
	//-----------------------------------------------------------------------------------------------------------------------
	
	f_REG_CMDW->(ALL, 1, 0x40, 0x51, 0x00);	
	f_DELAY_MS->(10);

}*end

void Func_call::q_Sleep_IN(){

	f_REG_CMDW->(ALL, 1, 0x40, 0x51, 0x00);

	//mipi.write 0x05 0x29 # Display off
	f_REG_CMDW->(ALL, 1, 0x50, 0x01, 0x00);
	f_REG_CMDW->(ALL, 1, 0x53, 0x28);

	//delay 200
	f_DELAY_MS->(200);

	//mipi.write 0x05 0x11 # Sleep in
	f_REG_CMDW->(ALL, 1, 0x50, 0x01, 0x00);
	f_REG_CMDW->(ALL, 1, 0x53, 0x10);
	
}*end

void Func_call::q_Power_OFF(){
	f_MIPI_BD_RESET->(OFF);		// MDM HW Reset	(*********Source edit*********)
	f_DELAY_MS->(5);	
	
	f_PORT_EXT1->(ALL, LOW); 	// RESET OFF
	f_DELAY_MS->(5);
	
	f_POWER_VLCD->(ALL, OFF); 	// VPNL OFF
	f_DELAY_MS->(5);
	
	f_PORT_EXT2->(ALL, OFF); 	// VDDD	EN
	f_DELAY_MS->(5);
	
	f_POWER_VEXT->(ALL, OFF); 	// VDDI OFF
	f_DELAY_MS->(5);
	
   	f_POWER_VCC->(ALL, OFF); 
   	f_DELAY_MS->(5); 
	
	f_POWER_VBAT->(ALL, OFF);
	f_POWER_VBL->(ALL, OFF);
}*end

void Func_call::q_IO_All_OFF(){
	f_PORT_EXT1->(ALL, LOW);		// RESET OFF
	f_PORT_EXT2->(ALL, LOW);		// VDDD	EN
	f_PORT_EXT3->(ALL, LOW);		// Power IC Sensing	
//	f_PORT_EXT4->(ALL, LOW); 		// XXXX

	f_PORT_GPO1->(ALL, OFF);		// T_INT
	f_PORT_GPO2->(ALL, OFF);		// TE
	f_PORT_GPO3->(ALL, OFF);		// ERR_FG
	f_PORT_GPO4->(ALL, OFF);		// T_RST

	f_PWM_START->(ALL, 1, OFF);		// T1.8V EN
	f_PWM_START->(ALL, 2, OFF);		// PM IC EN
}*end

void Func_call::q_Vddd_Power_SET(){
	f_FUNC_CMDW->(ALL,1, 0x26,0x01,0x05,0x1E); //1310
	f_DELAY_MS->(1000);
}*end

void Func_call::q_Vddd_Flag_SET(){
	// subcmd list
	// 0x02:VPP&VDDD Select(0:VPP, 1:VDDD)
	// 0x03:PMIC Enable Select(0:AVDD_EN, 1:PWM2)
	// 0x04:DDVDH uA,mA Select
	// 0x05:ELVSS uA,mA Select
	f_FUNC_CMDW->(ALL,1, 0x26,0x02,0x01,0x00); // VDDD USE
	f_DELAY_MS->(5);
	f_FUNC_CMDW->(ALL,1, 0x26,0x03,0x00,0x00); // AVDD_EN USE
	f_DELAY_MS->(5);
	
	f_FUNC_CMDW->(ALL,1, 0x26,0x04,0x01,0x00); // DDVDH mA USE
	f_DELAY_MS->(5);
	
	f_FUNC_CMDW->(ALL,1, 0x26,0x05,0x01,0x00); // ELVDD mA USE
	f_DELAY_MS->(5);
}*end

void Func_call::q_Carrier_SET(){
	// MipiLine(0x01)=>MV/DP049, I2C(0x01)=1CH, I2C_CLK(0x1E)=30	
	//f_FUNC_CMDW->(ALL,1, 0x17,0x00,0x01,0x1E); // C3 (Right)
	f_FUNC_CMDW->(ALL,1, 0x17,0x01,0x01,0x1E); // R2 (Left)
	f_DELAY_MS->(5);
	
	// Et Board Touch Sel=> SPI(0x01),I2C(0x00)
	f_FUNC_CMDW->(ALL,1, 0x1E,0x01,0x00,0x00);
	f_DELAY_MS->(5);
}*end

void Func_call::q_Power_ON(){
	//-----------------------------------------------------------------------------------------------------------------------
	f_MIPI_BD_RESET->(ON);		// LP00
	f_DELAY_MS->(10);	
	//-----------------------------------------------------------------------------------------------------------------------
	f_POWER_VBL->(ALL, ON);
	f_DELAY_MS->(100); 
	f_POWER_VEXT->(ALL, ON);	// VDDI(1.8V)
	f_DELAY_MS->(2);
	f_POWER_VLCD->(ALL, ON);	// VPNL(3.1V)	
	f_DELAY_MS->(2);
	f_PORT_EXT2->(ALL, ON);		// VDDD	EN	
	f_DELAY_MS->(2);	
	//f_POWER_VCC->(ALL, ON);		// T_AVDD
	//f_DELAY_MS->(10);	
	//f_PWM_START->(ALL, 1, ON);  //T_1.8V
	f_PWM_START->(ALL, 2, ON);  //AVDD_EN
	f_DELAY_MS->(10);	
	//-----------------------------------------------------------------------------------------------------------------------
	// MIPI Software Reset		//LP11
   	f_REG_CMDW->(ALL, 1, 0x12, 0x01, 0x01);
	f_DELAY_MS->(1);
	f_REG_CMDW->(ALL, 1, 0x12, 0x00, 0x00);
	f_DELAY_MS->(2);
	//-----------------------------------------------------------------------------------------------------------------------
	// RESET	
	f_PORT_EXT1->(ALL, ON);			// RESET	
	f_PORT_GPO4->(ALL, ON);			// TOUCH_RST
	f_DELAY_MS->(2);	   
	f_PORT_EXT1->(ALL, OFF);		// RESET	
	f_PORT_GPO4->(ALL, OFF);		// TOUCH_RST
	f_DELAY_MS->(5);	
	f_PORT_EXT1->(ALL, ON);			// RESET	
	f_PORT_GPO4->(ALL, ON);			// TOUCH_RST
	f_DELAY_MS->(50);	
	//-----------------------------------------------------------------------------------------------------------------------
}*end

void Func_call::q_SEQUENCE_01(){

//mipi.write 0x39 0x7F 0x5A 0x5A # UCS Access
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x7F, 0x5A, 0x5A);

//mipi.write 0x39 0xF0 0x5A 0x5A # MCS Access LV1
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xF0, 0x5A, 0x5A);

//mipi.write 0x39 0xF1 0x5A 0x5A # MCS Access LV2
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xF1, 0x5A, 0x5A);

//mipi.write 0x39 0xF2 0x5A 0x5A # MCS Access LV3
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xF2, 0x5A, 0x5A);

//mipi.write 0x15 0xB0 0x7D
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x7D);

//mipi.write 0x39 0xE5 0x00 0x13 0x00 0x13 0x53 0x53 # ERA, OD, DGMA, POCB Load En
f_REG_CMDW->(ALL, 1, 0x50, 0x07, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE5, 0x00, 0x13, 0x00, 0x13, 0x53, 0x53);

//mipi.write 0x39 0xE8 0x0F 0xFF 0xFF 0xFF # Flash Load Disable
f_REG_CMDW->(ALL, 1, 0x50, 0x05, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE8, 0x0F, 0xFF, 0xFF, 0xFF);

//mipi.write 0x39 0x02 0x01 # DSC On / Off: 0x00
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x02, 0x01);

//mipi.write 0x39 0x59 0x00 # Mode Select, 00: CMD DSC, 01: CMD DSC, 02: Video DSC with RAM, 03: Video DSC without RAM
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x59, 0x00);

//mipi.write 0x39 0x2A 0x00 0x00 0x04 0xCb # Column Address 1,228
f_REG_CMDW->(ALL, 1, 0x50, 0x05, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x2A, 0x00, 0x00, 0x04, 0xCB);

//mipi.write 0x39 0x2B 0x00 0x00 0x0A 0x8b # Page Address 2,700
f_REG_CMDW->(ALL, 1, 0x50, 0x05, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x2B, 0x00, 0x00, 0x0A, 0x8B);

//mipi.write 0x39 0x51 0x0D 0xD6 # DBV Setting : FFF(HBM), DD6, BB8, 992, 7EE, 6A4, 578, 41A, 2C2, 1C2, 0C8, 001
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x51, 0x0D, 0xD6);

//mipi.write 0x39 0x53 0x20 # 2: 51h on, Dimming Off / 0: Dimming Off, 8: Dimming On
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x53, 0x20);

//mipi.write 0x39 0x55 0x00 # PLC off
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x55, 0x00);

}*end

void Func_call::q_SEQUENCE_02(){

//mipi.write 0x39 0x57 0x00 0x12 0x81 0xF8 0xED 0x00 0x00  # Normal Mode (Simple PPA+IRC+OD+POCB) <ver0.7_200924>
f_REG_CMDW->(ALL, 1, 0x50, 0x08, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x57, 0x00, 0x12, 0x81, 0xF8, 0xED, 0x00, 0x00);

//mipi.write 0x39 0x58 0x00 0x00 0x00 0xF8 0xFF 0x01 0x00 # AoD Mode : all off
f_REG_CMDW->(ALL, 1, 0x50, 0x08, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x58, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x01, 0x00);

//mipi.write 0x39 0x76 0x00 # Go to HFR60Hz, Normal sel = set1
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x76, 0x00);

//mipi.write 0x0A 0x11 0x00 0x00 0x89 0x30 0x80 0x0A 0x8C 0x04 0xCC 0x00 0x1E 0x02 0x66 0x02 0x66 0x02 0x00 0x02 0x33 0x00 0x20 0x03 0x13 0x00 0x08 0x00 0x0C 0x03 0x50 0x02 0xFA 0x18 0x00 0x10 0xF0 0x03 0x0C 0x20 0x00 0x06 0x0B 0x0B 0x33 0x0E 0x1C 0x2A 0x38 0x46 0x54 0x62 0x69 0x70 0x77 0x79 0x7B 0x7D 0x7E 0x01 0x02 0x01 0x00 0x09 0x40 0x09 0xBE 0x19 0xFC 0x19 0xFA 0x19 0xF8 0x1A 0x38 0x1A 0x78 0x1A 0xB6 0x2A 0xF6 0x2B 0x34 0x2B 0x74 0x3B 0x74 0x6B 0xF4 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
f_REG_CMDW->(ALL, 1, 0x40, 0xC1, 0x00);
f_REG_CMDW->(ALL, 1, 0x5D, 0x0A, 0x00);
f_REG_CMDW->(ALL, 1, 0x50, 0x80, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x11, 0x00, 0x00, 0x89, 0x30, 0x80, 0x0A, 0x8C, 0x04, 0xCC, 0x00, 0x1E, 0x02, 0x66, 0x02, 0x66, 0x02, 0x00, 0x02, 0x33, 0x00, 0x20, 0x03, 0x13, 0x00, 0x08, 0x00, 0x0C, 0x03, 0x50, 0x02, 0xFA, 0x18, 0x00, 0x10, 0xF0, 0x03, 0x0C, 0x20, 0x00, 0x06, 0x0B, 0x0B, 0x33, 0x0E, 0x1C, 0x2A, 0x38, 0x46, 0x54, 0x62, 0x69, 0x70, 0x77, 0x79, 0x7B, 0x7D, 0x7E, 0x01, 0x02, 0x01, 0x00, 0x09, 0x40, 0x09, 0xBE, 0x19, 0xFC, 0x19, 0xFA, 0x19, 0xF8, 0x1A, 0x38, 0x1A, 0x78, 0x1A, 0xB6, 0x2A, 0xF6, 0x2B, 0x34, 0x2B, 0x74, 0x3B, 0x74, 0x6B, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

f_REG_CMDW->(ALL, 1, 0x40, 0x51, 0x00); //  LP MODE DCS 
f_REG_CMDW->(ALL, 1, 0x5B, 0x00, 0x00); // VC setting. 

}*end

void Func_call::q_SEQUENCE_03(){

//mipi.write 0x39 0xE1 0x4C 0xCA 0x8C 0x00 0x9C 0x00 0x9C 0x18 0x00 0x0A 0xBC 0x00 0x9C 0x00 0x9C 0x18 0x00 0x03 0x9C 0x00 0x9C 0x00 0x9C 0x18 0x00 0x00 0x0C 0x00 0x9C 0x00 0x9C 0x18 0x00 0x0A 0xBC 0x00 0x9C 0x00 0x9C 0x18 0x00 0x03 0x9C 0x00 0x9C 0x00 0x9C 0x18 0x00 0x00 0x0C 0x03 0x9C 0x03 0x9C 0x18 0x00 0x00 0x0C 
f_REG_CMDW->(ALL, 1, 0x50, 0x3C, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE1, 0x4C, 0xCA, 0x8C, 0x00, 0x9C, 0x00, 0x9C, 0x18, 0x00, 0x0A, 0xBC, 0x00, 0x9C, 0x00, 0x9C, 0x18, 0x00, 0x03, 0x9C, 0x00, 0x9C, 0x00, 0x9C, 0x18, 0x00, 0x00, 0x0C, 0x00, 0x9C, 0x00, 0x9C, 0x18, 0x00, 0x0A, 0xBC, 0x00, 0x9C, 0x00, 0x9C, 0x18, 0x00, 0x03, 0x9C, 0x00, 0x9C, 0x00, 0x9C, 0x18, 0x00, 0x00, 0x0C, 0x03, 0x9C, 0x03, 0x9C, 0x18, 0x00, 0x00, 0x0C);

//mipi.write 0x39 0xB0 0x9E # P159
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x9E);

//mipi.write 0x39 0xE1 0x00 0x9C 0x00 0x9C 0x18 0x00 0x03 0x9C 0x50 0x20 0x20 0x20 0x10 0x41 0x44 0x44 0x44 0x22 0xD2 
f_REG_CMDW->(ALL, 1, 0x50, 0x14, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE1, 0x00, 0x9C, 0x00, 0x9C, 0x18, 0x00, 0x03, 0x9C, 0x50, 0x20, 0x20, 0x20, 0x10, 0x41, 0x44, 0x44, 0x44, 0x22, 0xD2);

//mipi.write 0x39 0xB0 0xA6 # Para Offset : 166
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0xA6);

//mipi.write 0x39 0xD8 0x4B 0xD1 0xCA 0x91 0x91 0x89 0x91 0x11 0x07 0x01 0x11 0x91 0x91 0x03 0x11 0x11 0x11 0x82 0x0B 0x11 0x0A 0x11 0x11 0x09 0x11 0x11 0x07 0x01 0x11 0x11 0x11 0x03 0x11 0x11 0x11 0x02 # P195 ~ 202 
f_REG_CMDW->(ALL, 1, 0x50, 0x25, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD8, 0x4B, 0xD1, 0xCA, 0x91, 0x91, 0x89, 0x91, 0x11, 0x07, 0x01, 0x11, 0x91, 0x91, 0x03, 0x11, 0x11, 0x11, 0x82, 0x0B, 0x11, 0x0A, 0x11, 0x11, 0x09, 0x11, 0x11, 0x07, 0x01, 0x11, 0x11, 0x11, 0x03, 0x11, 0x11, 0x11, 0x02);

//mipi.write 0x39 0xD4 0x42 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x33 0x00 0x56 0x01 0x30 0x00 0x56 0x01 0x30 # P15~P18 GCLK2 Ver0.7 0924
f_REG_CMDW->(ALL, 1, 0x50, 0x13, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD4, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x00, 0x56, 0x01, 0x30, 0x00, 0x56, 0x01, 0x30);

//mipi.write 0x15 0xB0 0x22
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x22);

//mipi.write 0x39 0xD4 0x00 0x00 0x00 0x00 0x00 0x40 0x01 0x10 0x00 0x40 0x01 0x10 # P44~P47 ECLK2 (S: 0.506us, E: 2.15us) 
f_REG_CMDW->(ALL, 1, 0x50, 0x0D, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x10, 0x00, 0x40, 0x01, 0x10);

//mipi.write 0x15 0xB0 0x3A
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x3A);


}*end

void Func_call::q_SEQUENCE_04(){

//mipi.write 0x39 0xD4 0x42 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x33 0x00 0x56 0x01 0x30 0x00 0x56 0x01 0x30 # P73~P76 GCLK2 Ver0.7 0924
f_REG_CMDW->(ALL, 1, 0x50, 0x13, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD4, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x00, 0x56, 0x01, 0x30, 0x00, 0x56, 0x01, 0x30);

//mipi.write 0x15 0xB0 0x5C
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x5C);

//mipi.write 0x39 0xD4 0x00 0x00 0x00 0x00 0x00 0x40 0x01 0x10 0x00 0x40 0x01 0x10 # P101~P104 ECLK2 
f_REG_CMDW->(ALL, 1, 0x50, 0x0D, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x10, 0x00, 0x40, 0x01, 0x10);

//mipi.write 0x15 0xB0 0x74
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x74);

//mipi.write 0x39 0xD4 0x22 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x33 0x00 0x56 0x01 0x30 0x00 0x56 0x01 0x30 # P131~P134 GCLK2  Ver0.7 0924
f_REG_CMDW->(ALL, 1, 0x50, 0x13, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD4, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x00, 0x56, 0x01, 0x30, 0x00, 0x56, 0x01, 0x30);

//mipi.write 0x15 0xB0 0x96
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x96);

//mipi.write 0x39 0xD4 0x00 0x00 0x00 0x00 0x00 0x40 0x01 0x10 0x00 0x40 0x01 0x10 # P159~P162 ECLK2 
f_REG_CMDW->(ALL, 1, 0x50, 0x0D, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x10, 0x00, 0x40, 0x01, 0x10);

//mipi.write 0x15 0xB0 0xAE
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0xAE);

//mipi.write 0x39 0xD4 0x42 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x33 0x00 0x56 0x01 0x30 0x00 0x56 0x01 0x30 # P189~P192 GCLK2 Ver_0.7 0924
f_REG_CMDW->(ALL, 1, 0x50, 0x13, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD4, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x00, 0x56, 0x01, 0x30, 0x00, 0x56, 0x01, 0x30);

//mipi.write 0x15 0xB0 0xD0
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0xD0);

//mipi.write 0x39 0xD4 0x00 0x00 0x00 0x00 0x00 0x40 0x01 0x10 0x00 0x40 0x01 0x10 # P217~P220 ECLK2 
f_REG_CMDW->(ALL, 1, 0x50, 0x0D, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x10, 0x00, 0x40, 0x01, 0x10);

//mipi.write 0x39 0xD5 0x42 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x33 0x00 0x56 0x01 0x30 0x00 0x56 0x01 0x30 # P15~P18 GCLK2 Ver0.7 0924
f_REG_CMDW->(ALL, 1, 0x50, 0x13, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD5, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x00, 0x56, 0x01, 0x30, 0x00, 0x56, 0x01, 0x30);

//mipi.write 0x15 0xB0 0x22
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x22);

}*end

void Func_call::q_SEQUENCE_05(){

//mipi.write 0x39 0xD5 0x00 0x00 0x00 0x00 0x00 0x40 0x01 0x10 0x00 0x40 0x01 0x10 # P44~P47 ECLK2 
f_REG_CMDW->(ALL, 1, 0x50, 0x0D, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x10, 0x00, 0x40, 0x01, 0x10);

//mipi.write 0x15 0xB0 0x3A
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x3A);

//mipi.write 0x39 0xD5 0x22 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x33 0x00 0x56 0x01 0x30 0x00 0x56 0x01 0x30 # P73~P76 GCLK2 Ver0.7 0.924
f_REG_CMDW->(ALL, 1, 0x50, 0x13, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD5, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x00, 0x56, 0x01, 0x30, 0x00, 0x56, 0x01, 0x30);

//mipi.write 0x15 0xB0 0x5C
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x5C);

//mipi.write 0x39 0xD5 0x00 0x00 0x00 0x00 0x00 0x40 0x01 0x10 0x00 0x40 0x01 0x10 # P101~P104 ECLK2 
f_REG_CMDW->(ALL, 1, 0x50, 0x0D, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x10, 0x00, 0x40, 0x01, 0x10);

//mipi.write 0x15 0xB0 0x8E
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x8E);

//mipi.write 0x39 0xB1 0x15 0x80 #resolution 4H, Iteration 1
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB1, 0x15, 0x80);

//mipi.write 0x15 0xB0 0x74
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x74);

//mipi.write 0x39 0xD5 0x22 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x4A 0x00 0x51 0x01 0xF0 0x00 0x51 0x01 0xF0 # P131~P134 GCLK2 (S: 1.28us, E: 7.84us) 
f_REG_CMDW->(ALL, 1, 0x50, 0x13, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD5, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4A, 0x00, 0x51, 0x01, 0xF0, 0x00, 0x51, 0x01, 0xF0);

//mipi.write 0x15 0xB0 0x96
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x96);

//mipi.write 0x39 0xD5 0x00 0x00 0x00 0x00 0x00 0x45 0x01 0x20 0x00 0x45 0x01 0x20 # P159~P162 ECLK2 (S: 1.09us, E: 4.55us) 
f_REG_CMDW->(ALL, 1, 0x50, 0x0D, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x01, 0x20, 0x00, 0x45, 0x01, 0x20);

//mipi.write 0x39 0xB0 0x05 # Para Offset : P5
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x05);

}*end

void Func_call::q_SEQUENCE_06(){

//mipi.write 0x39 0xD6 0x00 0x00 0x12 0x05 0x00 0x00 0x00 0x01 0x03 0x00 0x00 0x00 0x02 # P15~P18 GCLK2 : END State High, Start 0H, END 2H 
f_REG_CMDW->(ALL, 1, 0x50, 0x0E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD6, 0x00, 0x00, 0x12, 0x05, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x02);

//mipi.write 0x39 0xB0 0x22 # Para Offset : P34
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x22);

//mipi.write 0x39 0xD6 0x00 0x00 0x10 0x00 0x01 0xA0 0x00 0x00 0x00 0x00 0xF0 0x01 0x02 0x02 0xFF 0x01 0x02 0x00 0xFF 
f_REG_CMDW->(ALL, 1, 0x50, 0x14, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD6, 0x00, 0x00, 0x10, 0x00, 0x01, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0x02, 0x02, 0xFF, 0x01, 0x02, 0x00, 0xFF);

//mipi.write 0x39 0xB0 0x47 # Para Offset : P71
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x47);

//mipi.write 0x39 0xD6 0x00 0x00 0x12 0x05 0x00 0x00 0x00 0x01 0x03 0x00 0x00 0x00 0x02 # P81~P84 GCLK2 : END State High, Start 0H, END 2H 
f_REG_CMDW->(ALL, 1, 0x50, 0x0E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD6, 0x00, 0x00, 0x12, 0x05, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x02);

//mipi.write 0x39 0xB0 0x64 # Para Offset : P100
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x64);

//mipi.write 0x39 0xD6 0x00 0x00 0x10 0x00 0x01 0xA0 0x00 0x00 0x00 0x00 0xF0 0x01 0x02 0x02 0xFF 0x01 0x02 0x00 0xFF # P116~P119 ECLK2 : Width 2H, Period 4H(2H) 
f_REG_CMDW->(ALL, 1, 0x50, 0x14, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD6, 0x00, 0x00, 0x10, 0x00, 0x01, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0x02, 0x02, 0xFF, 0x01, 0x02, 0x00, 0xFF);

//mipi.write 0x39 0xB0 0x89 # Para Offset : P137
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x89);

//mipi.write 0x39 0xD6 0x00 0x00 0x12 0x05 0x00 0x00 0x00 0x01 0x03 0x00 0x00 0x00 0x02 # P147~P150 GCLK2 : END State High, Start 0H, END 2H 
f_REG_CMDW->(ALL, 1, 0x50, 0x0E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD6, 0x00, 0x00, 0x12, 0x05, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x02);

//mipi.write 0x39 0xB0 0xA6 # Para Offset : P166
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0xA6);

//mipi.write 0x39 0xD6 0x00 0x00 0x10 0x00 0x01 0xA0 0x00 0x00 0x00 0x00 0xF0 0x01 0x02 0x02 0xFF 0x01 0x02 0x00 0xFF # P182~P185 ECLK2 : Width 2H, Period 2H (2H) 
f_REG_CMDW->(ALL, 1, 0x50, 0x14, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD6, 0x00, 0x00, 0x10, 0x00, 0x01, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0x02, 0x02, 0xFF, 0x01, 0x02, 0x00, 0xFF);

//mipi.write 0x39 0xB0 0x05 # Para Offset : P5
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x05);

}*end

void Func_call::q_SEQUENCE_07(){

//mipi.write 0x39 0xD7 0x00 0x00 0x12 0x05 0x00 0x00 0x00 0x01 0x03 0x00 0x00 0x00 0x02 # P15~P18 GCLK2 : END State High, Start 0H, END 2H 
f_REG_CMDW->(ALL, 1, 0x50, 0x0E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD7, 0x00, 0x00, 0x12, 0x05, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x02);

//mipi.write 0x39 0xB0 0x22 # Para Offset : P34
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x22);

//mipi.write 0x39 0xD7 0x00 0x00 0x10 0x00 0x01 0xA0 0x00 0x00 0x00 0x00 0xF0 0x01 0x02 0x02 0xFF 0x01 0x02 0x00 0xFF # P50~P53 ECLK2 : Width 2H, Period 4H (2H) 
f_REG_CMDW->(ALL, 1, 0x50, 0x14, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD7, 0x00, 0x00, 0x10, 0x00, 0x01, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0x02, 0x02, 0xFF, 0x01, 0x02, 0x00, 0xFF);

//mipi.write 0x39 0xB0 0x47 # Para Offset : P71
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x47);

//mipi.write 0x39 0xD7 0x00 0x00 0x12 0x05 0x00 0x00 0x00 0x01 0x03 0x00 0x00 0x00 0x02 # P81~P84 GCLK2 : END State High, Start 0H, END 2H 
f_REG_CMDW->(ALL, 1, 0x50, 0x0E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD7, 0x00, 0x00, 0x12, 0x05, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x02);

//mipi.write 0x39 0xB0 0x64 # Para Offset : P100
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x64);

//mipi.write 0x39 0xD7 0x00 0x00 0x10 0x00 0x01 0xA0 0x00 0x00 0x00 0x00 0xF0 0x01 0x02 0x02 0xFF 0x01 0x02 0x00 0xFF # P116~P119 ECLK2 : Width 2H, Period 4H (2H) 
f_REG_CMDW->(ALL, 1, 0x50, 0x14, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD7, 0x00, 0x00, 0x10, 0x00, 0x01, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0x02, 0x02, 0xFF, 0x01, 0x02, 0x00, 0xFF);

//mipi.write 0x39 0xB0 0x89 # Para Offset : P137
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x89);

//mipi.write 0x39 0xD7 0x00 0x00 0x12 0x05 0x00 0x00 0x00 0x01 0x03 0x00 0x00 0x00 0x02 # P147~P150 GCLK2 : END State High, Start 0H, END 2H 
f_REG_CMDW->(ALL, 1, 0x50, 0x0E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD7, 0x00, 0x00, 0x12, 0x05, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x02);

//mipi.write 0x39 0xB0 0xA6 # Para Offset : P166
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0xA6);

//mipi.write 0x39 0xD7 0x00 0x00 0x10 0x00 0x01 0xA0 0x00 0x00 0x00 0x00 0xF0 0x01 0x02 0x02 0xFF 0x01 0x02 0x00 0xFF # P182~P185 ECLK2 : Width 2H, Period 4H (2H) 
f_REG_CMDW->(ALL, 1, 0x50, 0x14, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD7, 0x00, 0x00, 0x10, 0x00, 0x01, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0x02, 0x02, 0xFF, 0x01, 0x02, 0x00, 0xFF);

}*end

void Func_call::q_SEQUENCE_08(){

//mipi.write 0x15 0xB0 0x05
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x05);

//mipi.write 0x39 0xD8 0x00 0x00 0x16 0x01 0x00 0x00 0x00 0x01 0x03 0x00 0x00 0x00 0x02 # P15~P18 GCLK2 : END State High, Start 0H, END 2H 	#200814 v0.5
f_REG_CMDW->(ALL, 1, 0x50, 0x0E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD8, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x02);

//mipi.write 0x39 0xB0 0x22 # Para Offset : P34
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x22);

//mipi.write 0x39 0xD8 0x00 0x00 0x14 0x00 0x01 0xA0 0x00 0x00 0x00 0x01 0x30 0x01 0x02 0x02 0xFF 0x01 0x02 0x00 0xFF # P50~P53 ECLK2 : Width 2H, Period 4H (2H)  #200814 v0.5
f_REG_CMDW->(ALL, 1, 0x50, 0x14, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD8, 0x00, 0x00, 0x14, 0x00, 0x01, 0xA0, 0x00, 0x00, 0x00, 0x01, 0x30, 0x01, 0x02, 0x02, 0xFF, 0x01, 0x02, 0x00, 0xFF);

//mipi.write 0x15 0xB0 0x89
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x89);

//mipi.write 0x39 0xD8 0x00 0x00 0x00 0x0A 0xAE # P137 EQRST START, END Setting(VBP+VACT+10 = 2734 )
f_REG_CMDW->(ALL, 1, 0x50, 0x06, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD8, 0x00, 0x00, 0x00, 0x0A, 0xAE);

//mipi.write 0x39 0xB0 0x8E # Para Offset : P142
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x8E);

//mipi.write 0x39 0xD8 0x09 0x0F 0x0F 0x09 0x0F 0x0F 0x09 0x0F 0x0F 0x09 0x0F 0x0F 0x09 0x0F 0x0F 0x09 0x0F 0x0F 0x09 0x1F 0x1F # P161~P163 AOD EQ 490ns 
f_REG_CMDW->(ALL, 1, 0x50, 0x16, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD8, 0x09, 0x0F, 0x0F, 0x09, 0x0F, 0x0F, 0x09, 0x0F, 0x0F, 0x09, 0x0F, 0x0F, 0x09, 0x0F, 0x0F, 0x09, 0x0F, 0x0F, 0x09, 0x1F, 0x1F);

//mipi.write 0x39 0xE5 0x01 0x80 0x04 0x0A 0xA8 0x0A 0x00 0x00 0x00 0x00 0x00 0x00 0x14 # MX TE / VBP Direction / P10 Chopping 1frame
f_REG_CMDW->(ALL, 1, 0x50, 0x0E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE5, 0x01, 0x80, 0x04, 0x0A, 0xA8, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14);

}*end

void Func_call::q_SEQUENCE_09(){

//mipi.write 0x15 0xB0 0x13
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x13);

//mipi.write 0x39 0xE5 0x02 0x29 0x02 0x29 0x01 0x60 0x01 0x60 0x01 0x60 0x01 0x60 0x01 0x60 0x01 0x60 0x01 0x60 0x01 0x60 0x01 0x60 0x01 0x60 0x01 0x60 0x01 0x60 0x00 0x00 0x00 0x80 0xAB 0x00 0x15 0x48 0x80 0xAB 0x00 0x0E 0x34 0x00 0xAB 0x00 0x0A 0xB0 0x80 0xAB 0x00 0x15 0x48 0x80 0xAB 0x00 0x0E 0x34 0x00 0xAB 0x00 0x0A 0xB0 0x00 0x00 0x00 0x00 0x00 # P81~85 : AoD Source Amp Option 
f_REG_CMDW->(ALL, 1, 0x50, 0x43, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE5, 0x02, 0x29, 0x02, 0x29, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x01, 0x60, 0x00, 0x00, 0x00, 0x80, 0xAB, 0x00, 0x15, 0x48, 0x80, 0xAB, 0x00, 0x0E, 0x34, 0x00, 0xAB, 0x00, 0x0A, 0xB0, 0x80, 0xAB, 0x00, 0x15, 0x48, 0x80, 0xAB, 0x00, 0x0E, 0x34, 0x00, 0xAB, 0x00, 0x0A, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00);

//mipi.write 0x15 0xB0 0xA6
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0xA6);

//mipi.write 0x39 0xE4 0x04 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x11 # P168 ~ 169 : 2nd Latch Delay Option, P182 : Spread Option
f_REG_CMDW->(ALL, 1, 0x50, 0x11, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11);

//mipi.write 0x39 0xB0 0x83 # Para Offset : P131
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x83);

//mipi.write 0x39 0xE5 0x00 0x10 0x00 # DL_PMODE 1(Normal), P134 : FP_2C_SYNC Disable
f_REG_CMDW->(ALL, 1, 0x50, 0x04, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE5, 0x00, 0x10, 0x00);

//mipi.write 0x39 0xB0 0x99 # Para Offset : P153
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x99);

//mipi.write 0x39 0xE5 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x02 0x03 0x04 0x05 # P160~P164 DHFR Setting 
f_REG_CMDW->(ALL, 1, 0x50, 0x0C, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05);

}*end

void Func_call::q_SEQUENCE_10(){

//mipi.write 0x39 0xE2 0x03 0x07 0x0C 0x0F 0x0F 0x0F 0xEA 0x00 0x30 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x04 0x00 0x00 0x0A 0x0D 0x10 0x13 0x16 0x16 0x33 0x00 0x00 0x00 0x00 0x0C 0x00 0x00 0x0F 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x0E 0x0E 0x0E 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x11 0x37 0x2D 0x30 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x2E 0x24 0x20 0x1B 0x14 0x14 0x14 0x14 0x14 0x14 0x14 0x14 0x2E 0x24 0x20 0x1B 0x14 0x14 0x14 0x14 0x14 0x14 0x14 0x14 0x00 0x44 0x00 0xEE 0x00 0x00 0x00 0x99 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x11 0x37 0x2D 0x30 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x2D 0x23 0x1F 0x1A 0x13 0x13 0x13 0x13 0x13 0x13 0x13 0x13 0x2D 0x23 0x1F 0x1A 0x13 0x13 0x13 0x13 0x13 0x13 0x13 0x13 0x00 0x44 0x00 0xEE 0x00 0x00 0x00 0x99 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x11 0x37 0x2D 0x30 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x2C 0x22 0x1E 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x2C 0x22 0x1E 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x00 0x44 0x00 0xEE 0x00 0x00 0x00 0x99 #(P237 ~ P242) H1C 
f_REG_CMDW->(ALL, 1, 0x50, 0xF3, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE2, 0x07, 0x07, 0x0C, 0x0F, 0x0F, 0x0F, 0xEA, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0A, 0x0D, 0x10, 0x13, 0x16, 0x16, 0x33, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x37, 0x37, 0x30, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x2E, 0x24, 0x20, 0x1B, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x2E, 0x24, 0x20, 0x1B, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x44, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x99, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x37, 0x37, 0x30, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x2D, 0x23, 0x1F, 0x1A, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x2D, 0x23, 0x1F, 0x1A, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x00, 0x44, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x99, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x37, 0x37, 0x30, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x2C, 0x22, 0x1E, 0x19, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x2C, 0x22, 0x1E, 0x19, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x00, 0x44, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x99);


}*end

void Func_call::q_SEQUENCE_11(){

//mipi.write 0x39 0xE3 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x11 0x37 0x2D 0x30 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x2E 0x24 0x20 0x1B 0x14 0x14 0x14 0x14 0x14 0x14 0x14 0x14 0x2E 0x24 0x20 0x1B 0x14 0x14 0x14 0x14 0x14 0x14 0x14 0x14 0x00 0x44 0x00 0xEE 0x00 0x00 0x00 0x99 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x11 0x37 0x2D 0x30 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x2D 0x23 0x1F 0x1A 0x13 0x13 0x13 0x13 0x13 0x13 0x13 0x13 0x2D 0x23 0x1F 0x1A 0x13 0x13 0x13 0x13 0x13 0x13 0x13 0x13 0x00 0x44 0x00 0xEE 0x00 0x00 0x00 0x99 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x11 0x37 0x2D 0x30 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x2C 0x22 0x1E 0x19 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x2C 0x22 0x1E 0x19 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x00 0x44 0x00 0xEE 0x00 0x00 0x00 0x99 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x11 0x2D 0x2D 0x30 0x20 0x20 0x20 0x14 0x14 0x14 0x14 0x14 0x14 0x00 0x00 0x00 0x00 0x00 0x06 # (P210 ~ P215) AOD PELVDD, PELVSS, VDDEL_OFFS_VAV, CA Setting # (P210 ~ P215) ELVDD 4.2V / ELVSS -1.6V B0&B1&B2 / AoD CA 
f_REG_CMDW->(ALL, 1, 0x50, 0xD8, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x37, 0x37, 0x30, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x2E, 0x24, 0x20, 0x1B, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x2E, 0x24, 0x20, 0x1B, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x44, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x99, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x37, 0x37, 0x30, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x2D, 0x23, 0x1F, 0x1A, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x2D, 0x23, 0x1F, 0x1A, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x00, 0x44, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x99, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x37, 0x37, 0x30, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x2C, 0x22, 0x1E, 0x19, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x2C, 0x22, 0x1E, 0x19, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x00, 0x44, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x99, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x2D, 0x2D, 0x30, 0x20, 0x20, 0x20, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06);

//mipi.write 0x39 0xE4 0x00 0x2A 0x23 0x00 0x19 # DBV0 Setting
f_REG_CMDW->(ALL, 1, 0x50, 0x06, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE4, 0x00, 0x2A, 0x23, 0x00, 0x19);

//mipi.write 0x39 0xD0 0x83 0x08 0x14 0x80 0x00 0x00 0x40 0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x48 0x53 0x1F 0x4F 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x96 # P31~38 	#200814 v0.5
f_REG_CMDW->(ALL, 1, 0x50, 0x27, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD0, 0x83, 0x08, 0x14, 0x80, 0x00, 0x00, 0x40, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x53, 0x1F, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96);

}*end

void Func_call::q_SEQUENCE_12(){

//mipi.write 0x15 0xB0 0x36
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x36);

//mipi.write 0x39 0xD0 0x46 0x00 0x2B 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x48 0x53 0x1F 0x4F 0x00 0x00 0x00 0x00 0x1F 0x00 0x00 0x00 0x00 0x00 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x00 0x00 0x64 # P95~106  // AoD DDVDH 7.1V ver0.7 PPV4 0925
f_REG_CMDW->(ALL, 1, 0x50, 0x35, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD0, 0x46, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x53, 0x1F, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x00, 0x00, 0x64);

//mipi.write 0x39 0xB0 0x6F #Offset Para. P111
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x6F);

//mipi.write 0x39 0xD0 0x01 0x35 0x0D 0x17 0x1B 0x20 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x0D 0x17 0x1B 0x20 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x0D 0x17 0x1B 0x20 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x0D 0x17 0x1B 0x20 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x0D 0x17 0x1B 0x20 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x0D 0x17 0x1B 0x20 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x27 0x2B 0x2B 0x2B # P186~188 AoD VSSEL Band Setting for Normal # -1.8
f_REG_CMDW->(ALL, 1, 0x50, 0x4E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD0, 0x01, 0x35, 0x01, 0x01, 0x1B, 0x20, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x01, 0x01, 0x1B, 0x20, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x01, 0x01, 0x1B, 0x20, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x01, 0x01, 0x1B, 0x20, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x01, 0x01, 0x1B, 0x20, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x01, 0x01, 0x1B, 0x20, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x27, 0x2B, 0x2B, 0x2B);

}*end


void Func_call::q_SEQUENCE_13(){

//mipi.write 0x39 0xE0 0x08 0x12 0x16 0x1B 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x08 0x12 0x16 0x1B 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x08 0x12 0x16 0x1B 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x08 0x12 0x16 0x1B 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x08 0x12 0x16 0x1B 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x08 0x12 0x16 0x1B 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x26 0x26 0x26 # P73~75 AoD VSSEL_Cold Band Setting # -2.3
f_REG_CMDW->(ALL, 1, 0x50, 0x4C, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE0, 0x08, 0x12, 0x16, 0x1B, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x08, 0x12, 0x16, 0x1B, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x08, 0x12, 0x16, 0x1B, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x08, 0x12, 0x16, 0x1B, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x08, 0x12, 0x16, 0x1B, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x08, 0x12, 0x16, 0x1B, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x26, 0x26, 0x26);

//mipi.write 0x15 0xB0 0x09
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x09);

//mipi.write 0x39 0xE4 0x35 0x2B 0x27 0x22 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x35 0x2B 0x27 0x22 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x32 0x28 0x24 0x1F 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x32 0x28 0x24 0x1F 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x2F 0x25 0x21 0x1C 0x15 0x15 0x15 0x15 0x15 0x15 0x15 0x15 0x2F 0x25 0x21 0x1C 0x15 0x15 0x15 0x15 0x15 0x15 0x15 0x15 0x35 0x2B 0x27 0x22 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x35 0x2B 0x27 0x22 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x1B 0x32 0x28 0x24 0x1F 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x32 0x28 0x24 0x1F 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x18 0x2F 0x25 0x21 0x1C 0x15 0x15 0x15 0x15 0x15 0x15 0x15 0x15 0x2F 0x25 0x21 0x1C 0x15 0x15 0x15 0x15 0x15 0x15 0x15 0x15 0x19 0x19 0x19 0x19 0x19 0x19 # P157~159 AoD VINI2_Offset_AVA_Cold Band Setting
f_REG_CMDW->(ALL, 1, 0x50, 0x97, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE4, 0x35, 0x2B, 0x27, 0x22, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x35, 0x2B, 0x27, 0x22, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x32, 0x28, 0x24, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x32, 0x28, 0x24, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x2F, 0x25, 0x21, 0x1C, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x2F, 0x25, 0x21, 0x1C, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x35, 0x2B, 0x27, 0x22, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x35, 0x2B, 0x27, 0x22, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x32, 0x28, 0x24, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x32, 0x28, 0x24, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x2F, 0x25, 0x21, 0x1C, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x2F, 0x25, 0x21, 0x1C, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19);

}*end


void Func_call::q_SEQUENCE_14(){

//mipi.write 0x39 0xD1 0x83 0x00 0x20 0x80 0x00 0x00 0x40 0x0C 0x00 0x00 0x00 0x00 0x00 0x06 0x0B 0x00 0x00 0x25 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xF0 0x00 0x40 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x96
f_REG_CMDW->(ALL, 1, 0x50, 0x27, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD1, 0x83, 0x00, 0x20, 0x80, 0x00, 0x00, 0x40, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0B, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x40, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96);

//mipi.write 0x15 0xB0 0x36
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x36);

//mipi.write 0x39 0xD1 0x39 0x00 0x2B 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x48 0x53 0x1F 0x4F 0x00 0x00 0x00 0x00 0x1F 0x00 0x00 0x00 0x00 0x00 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x96 0x00 0x00 0x00 0x64
f_REG_CMDW->(ALL, 1, 0x50, 0x35, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD1, 0x39, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x53, 0x1F, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x96, 0x00, 0x00, 0x00, 0x64);

//mipi.write 0x15 0xB0 0x6F
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x36);

//mipi.write 0x39 0xD1 0x01 0x35 0x13 0x1D 0x21 0x26 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x13 0x1D 0x21 0x26 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x13 0x1D 0x21 0x26 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x13 0x1D 0x21 0x26 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x13 0x1D 0x21 0x26 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x13 0x1D 0x21 0x26 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x31 0x31 0x31
f_REG_CMDW->(ALL, 1, 0x50, 0x4E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xD1, 0x01, 0x35, 0x13, 0x1D, 0x21, 0x26, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x13, 0x1D, 0x21, 0x26, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x13, 0x1D, 0x21, 0x26, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x13, 0x1D, 0x21, 0x26, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x13, 0x1D, 0x21, 0x26, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x13, 0x1D, 0x21, 0x26, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x31, 0x31, 0x31);

//mipi.write 0x15 0xB0 0x4D
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x4D);

//mipi.write 0x39 0xE0 0x0E 0x18 0x1C 0x21 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x0E 0x18 0x1C 0x21 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x0E 0x18 0x1C 0x21 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x0E 0x18 0x1C 0x21 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x0E 0x18 0x1C 0x21 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x0E 0x18 0x1C 0x21 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x2C 0x2C 0x2C
f_REG_CMDW->(ALL, 1, 0x50, 0x4C, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE0, 0x0E, 0x18, 0x1C, 0x21, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x0E, 0x18, 0x1C, 0x21, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x0E, 0x18, 0x1C, 0x21, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x0E, 0x18, 0x1C, 0x21, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x0E, 0x18, 0x1C, 0x21, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x0E, 0x18, 0x1C, 0x21, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2C, 0x2C, 0x2C);

}*end


void Func_call::q_SEQUENCE_15(){

//mipi.write 0x39 0xB1 0xDB 0x97 0x65 0x42 0x10 0x00 0xD6 0xB8 0x92 0xEE 0xA4 0x78 0x1A 0xC2 0xC2 0xC8 0x01 0x00 0x10 0x7F 0x43 0x5A 0x3A 0x7F 0x3A 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 # (P26 ~ P34) FP Setting , VREF0 보상 issue로 초기값 변경(200812)
f_REG_CMDW->(ALL, 1, 0x50, 0x23, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB1, 0xDB, 0x97, 0x65, 0x42, 0x10, 0x00, 0xD6, 0xB8, 0x92, 0xEE, 0xA4, 0x78, 0x1A, 0xC2, 0xC2, 0xC8, 0x01, 0x00, 0x10, 0x7F, 0x43, 0x5A, 0x3A, 0x7F, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

//mipi.write 0x39 0xB2 0x08 0x93 0xF9 0x3F 0xFF 0xFF 0xFF 0xFF 0xFF 0x00 # AoD DBV Setting 
f_REG_CMDW->(ALL, 1, 0x50, 0x0B, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB2, 0x08, 0x93, 0xF9, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00);

//mipi.write 0x39 0xB0 0x8E # Offset Para. P142
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x8E);

//mipi.write 0x39 0xB1 0x01 0x80 0x3F 0xFF 0xFF 0xFF # P143 ~ P148: AoD - Duty on / Dither off / 4H / Iteration 1 / AoD PWM 100 / 100 / 100
f_REG_CMDW->(ALL, 1, 0x50, 0x07, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB1, 0x01, 0x80, 0x3F, 0xFF, 0xFF, 0xFF);

//mipi.write 0x39 0xB0 0x99 # Offset Para. P153
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x99);

//mipi.write 0x39 0xB1 0x19 0x97 0xFF 0xE5 0x00 0xDB 0xDB 0xDB 0xDB 0xDB 0xAE 0xE1 0x19 0xA2 0xA0 0xA0 0xA0 0x19 0x8F 0xFF 0xE5 0x00 0xDB 0xDB 0xDB 0xDB 0xDB 0xAE 0xE1 0x19 0xA2 0xA2 0xA2 0xA2 0x19 0x8B 0xFF 0xE5 0x00 0xDB 0xDB 0xDB 0xDB 0xDB 0xAE 0xE1 0x19 0xA2 0xA2 0xA2 0xA2 0x15 0x80 0xFF 0xFF 0xFF 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0x15 0x80 0xFF 0xFF 0xFF 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0x15 0x80 0xFF 0xFF 0xFF 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB 0xDB # (P249 ~ P255) PWM Setting 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49, 96.49
f_REG_CMDW->(ALL, 1, 0x50, 0x67, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB1, 0x19, 0x97, 0xFF, 0xE5, 0x00, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xAE, 0xE1, 0x19, 0xA2, 0xA0, 0x9F, 0x9F, 0x19, 0x8F, 0xFF, 0xE5, 0x00, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xAE, 0xE1, 0x19, 0xA2, 0xA2, 0xA0, 0xA0, 0x19, 0x8B, 0xFF, 0xE5, 0x00, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xAE, 0xE1, 0x19, 0xA2, 0xA2, 0xA2, 0xA2, 0x15, 0x80, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x15, 0x80, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0x15, 0x80, 0xFF, 0xFF, 0xFF, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB);

//mipi.write 0x39 0xB0 0x22 # Para Offset : 34
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x22);

//mipi.write 0x39 0xB1 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 0xFE 0xDB 0xAA 0xAA 0x99 0x87 0xFF 0xA6 0x48 0xB8 0xF0 0x8C 0x5A 0x28 0xF6 0x60 0x98 0xD0 
f_REG_CMDW->(ALL, 1, 0x50, 0x6D, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB1, 0xFE, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0xA6, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0, 0xFE, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0xA6, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0, 0xFE, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0xA6, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0, 0xFE, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0xA6, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0, 0xFE, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0xA6, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0, 0xFE, 0xDB, 0xAA, 0xAA, 0x99, 0x87, 0xFF, 0xA6, 0x48, 0xB8, 0xF0, 0x8C, 0x5A, 0x28, 0xF6, 0x60, 0x98, 0xD0);
}*end

void Func_call::q_SEQUENCE_16(){

//mipi.write 0x39 0xB0 0x04 #AOD Vreg1
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x04);

//mipi.write 0x39 0xB2 0xB8 0x07 0xB8 0xFC 0xD0 # AOD0:0xBB8(3000), AOD1:0x8FC(2300), AOD2:0x7D0(2000) 
f_REG_CMDW->(ALL, 1, 0x50, 0x06, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB2, 0xA7, 0x06, 0x28, 0x6C, 0x72);

//mipi.write 0x39 0xB0 0x0A # Para Offset : 10
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x0A);

//mipi.write 0x39 0xB2 0x08 0x93 0xF9 0x3F 0xFF 0xFF 0xFF 0xFF 0xFF 0x00 0x03 0xFF 0xAE 0x00 0x00 0xB2 0xB2 0xA7 0xA2 0x93 0x90 0x9B 0x95 0x9A 0x86 0x03 0xFF 0xAE 0x00 0x00 0xB2 0xB2 0xA7 0xA2 0x93 0x90 0x9B 0x95 0x9A 0x86 0x03 0xFF 0xAE 0x00 0x00 0xB2 0xB2 0xA7 0xA2 0x93 0x90 0x9B 0x95 0x9A 0x86 # P41~55 B 
f_REG_CMDW->(ALL, 1, 0x50, 0x38, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB2, 0x08, 0x93, 0xF9, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xAE, 0x00, 0x00, 0xB2, 0xB2, 0xA7, 0xA2, 0x93, 0x90, 0x9B, 0x95, 0x9A, 0x86, 0x03, 0xFF, 0xAE, 0x00, 0x00, 0xB2, 0xB2, 0xA7, 0xA2, 0x93, 0x90, 0x9B, 0x95, 0x9A, 0x86, 0x03, 0xFF, 0xAE, 0x00, 0x00, 0xB2, 0xB2, 0xA7, 0xA2, 0x93, 0x90, 0x9B, 0x95, 0x9A, 0x86);

//mipi.write 0x39 0xB3 0x07 0xFF 0x40 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0xF5 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x07 0xFF 0x80 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P31~45 B 	VREF0 바꾸면서 초기값 변경(200812)
f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB3, 0x07, 0xFF, 0x40, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x03, 0xFF, 0xF5, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x07, 0xFF, 0x80, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);

//mipi.write 0x39 0xB0 0x2D # Para Offset : 45
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x2D);

//mipi.write 0x39 0xB3 0x03 0xFF 0xE8 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0xA6 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x07 0xFF 0x20 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P76~90 B 	VREF0 바꾸면서 초기값 변경(200812)
f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB3, 0x03, 0xFF, 0xE8, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x03, 0xFF, 0xA6, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x07, 0xFF, 0x20, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);

//mipi.write 0x39 0xB6 0x03 0xFF 0xE8 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0xA6 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x07 0xFF 0x20 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P31~45 B 	VREF0 바꾸면서 초기값 변경(200812)
f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB6, 0x03, 0xFF, 0xE8, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x03, 0xFF, 0xA6, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x07, 0xFF, 0x20, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);

//mipi.write 0x39 0xB0 0x2D # Para Offset : 45
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x2D);

//mipi.write 0x39 0xB6 0x03 0xFF 0x8B 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0x59 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x03 0xFF 0xCC 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P76~90 B 
f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB6, 0x03, 0xFF, 0x8B, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x03, 0xFF, 0x59, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x03, 0xFF, 0xCC, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);

//mipi.write 0x39 0xB9 0x03 0xFE 0x87 0x00 0x00 0xB7 0xA9 0xD0 0x99 0xD4 0x9E 0xD2 0x97 0x90 0xCA 0x03 0xFF 0x53 0x00 0x00 0xBA 0xAC 0xD0 0x97 0xD1 0x98 0xCD 0x90 0x8E 0x86 0x03 0xFF 0xC7 0x00 0x00 0xB6 0xAB 0xD0 0x9B 0xD5 0xA0 0xD1 0x97 0x95 0x85 # P31~45 B 
f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB9, 0x03, 0xFE, 0x87, 0x00, 0x00, 0xB7, 0xA9, 0xD0, 0x99, 0xD4, 0x9E, 0xD2, 0x97, 0x90, 0xCA, 0x03, 0xFF, 0x53, 0x00, 0x00, 0xBA, 0xAC, 0xD0, 0x97, 0xD1, 0x98, 0xCD, 0x90, 0x8E, 0x86, 0x03, 0xFF, 0xC7, 0x00, 0x00, 0xB6, 0xAB, 0xD0, 0x9B, 0xD5, 0xA0, 0xD1, 0x97, 0x95, 0x85);

}*end

void Func_call::q_SEQUENCE_17(){

//mipi.write 0x39 0xB0 0x2D # Para Offset : 45
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x2D);

//mipi.write 0x39 0xB9 0x03 0xFF 0x8B 0x00 0x00 0xBD 0xAF 0xD2 0x9C 0xD4 0x9E 0xD1 0x98 0x8C 0x10 0x03 0xFF 0x59 0x00 0x00 0xC0 0xB0 0xD1 0x98 0xD1 0x98 0xCE 0x92 0x95 0xA6 0x03 0xFF 0xCC 0x00 0x00 0xBD 0xB0 0xD3 0x9E 0xD5 0xA0 0xD1 0x97 0x9B 0x96 # P76~90 B 
f_REG_CMDW->(ALL, 1, 0x50, 0x2E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB9, 0x03, 0xFF, 0x8B, 0x00, 0x00, 0xBD, 0xAF, 0xD2, 0x9C, 0xD4, 0x9E, 0xD1, 0x98, 0x8C, 0x10, 0x03, 0xFF, 0x59, 0x00, 0x00, 0xC0, 0xB0, 0xD1, 0x98, 0xD1, 0x98, 0xCE, 0x92, 0x95, 0xA6, 0x03, 0xFF, 0xCC, 0x00, 0x00, 0xBD, 0xB0, 0xD3, 0x9E, 0xD5, 0xA0, 0xD1, 0x97, 0x9B, 0x96);

//mipi.write 0x39 0xB0 0x98 # P153 ~ 154 OSC_Dummy clock
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x98);

//mipi.write 0x39 0xE6 0x82 0x00
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE6, 0x82, 0x00);

//mipi.write 0x39 0xC6 0xCD 0x82 0x04 0x04 0x04 0x04 0x04 0x04 0x00 0x00 0x00 0x00 0x00 0x01 0x07 0x0F 0x17 0x1F 0x2F 0x3F 0x5F 0x7F 0xBF 0xFF 0x80 
f_REG_CMDW->(ALL, 1, 0x50, 0x1A, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC6, 0xCD, 0x82, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x17, 0x1F, 0x2F, 0x3F, 0x5F, 0x7F, 0xBF, 0xFF, 0x80);

//mipi.write 0x39 0xC6 0x00 # POCB OFF (POCB + Function off) ##### Send code(C6h_P1 : 0xC1) before Flash Writng
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC6, 0x00);

//mipi.write 0x39 0x35 0x00 # TE On
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x35, 0x00);

//delay 100
f_DELAY_MS->(100);
//delay 10
f_DELAY_MS->(10);
//mipi.write 0x05 0x11 # Sleep out
f_REG_CMDW->(ALL, 1, 0x50, 0x01, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x11);

//delay 50
f_DELAY_MS->(50);
//mipi.write 0x05 0x29 # Display on
//f_REG_CMDW->(ALL, 1, 0x50, 0x01, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0x29);
//delay 100
f_DELAY_MS->(100);

}*end


void Func_call::q_SEQUENCE_18(){

//mipi.write 0x15 0xB0 0x0F
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x0F);

//mipi.write 0x39 0xC5 0x01 0x33 0x32 0x97 0x90 0x4C 0xCA 0x8C 0x00 0x04
f_REG_CMDW->(ALL, 1, 0x50, 0x0B, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC5, 0x01, 0x33, 0x32, 0x97, 0x90, 0x4C, 0xCA, 0x8C, 0x00, 0x04);

//mipi.write 0x15 0xB0 0x92
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x92);

//mipi.write 0x15 0xCB 0x10	#ver0.5 OD
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xCB, 0x10);

//mipi.write 0x39 0xB0 0x2F # Para Offset : 47
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x2F);

//mipi.write 0x39 0xC5 0xE0 0x18 0x40 0x10 0x10 0x20 0x20 0x20 0x10 0x10 0x80 0x40 0x20 0x80 0x60 0x80 0x60 0x70 0x80 0x70 0x80 0x60 0x80 0x80 0x60 0x80
f_REG_CMDW->(ALL, 1, 0x50, 0x1B, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC5, 0xE0, 0x18, 0x40, 0x10, 0x10, 0x20, 0x20, 0x20, 0x10, 0x10, 0x80, 0x40, 0x20, 0x80, 0x60, 0x80, 0x60, 0x70, 0x80, 0x70, 0x80, 0x60, 0x80, 0x80, 0x60, 0x80);

//mipi.write 0x39 0xB0 0x92 # Para Offset : 146
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x92);

//mipi.write 0x39 0xCB 0x10
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xCB, 0x10);

//mipi.write 0x39 0xB0 0x9C # Para Offset : 156
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x9C);

//mipi.write 0x39 0xCB 0x0F 0xFF 0x0C 0x00 0x08 0x00 0x01 0xC2 0x00 0xC8 0x00 0x01
f_REG_CMDW->(ALL, 1, 0x50, 0x0D, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xCB, 0x0F, 0xFF, 0x0C, 0x00, 0x08, 0x00, 0x01, 0xC2, 0x00, 0xC8, 0x00, 0x01);

//mipi.write 0x39 0xB0 0x96 # Para Offset : 150
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x96);

//mipi.write 0x39 0xCB 0x39 0x08 0x01 0x01
f_REG_CMDW->(ALL, 1, 0x50, 0x05, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xCB, 0x39, 0x08, 0x01, 0x01);

//mipi.write 0x15 0xB0 0x83
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x83);

//mipi.write 0x39 0xCF 0x80 0x2E 0x00 0x2E 0x00 0x2E 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00 0x00 0x00 0x40 
f_REG_CMDW->(ALL, 1, 0x50, 0x15, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xCF, 0x80, 0x2E, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40);

//mipi.write 0x15 0xB0 0xB3
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0xB3);

//mipi.write 0x39 0xC5 0x00 0x03 0x01 0x56 0xAB 0xFC 0x03 0x01 0x56 0xAB 0xFC 0x03 0x01 0x56 0xAB 0xFC 0x00 0xFF 0x40 0x81 0xC4 0x04 0x44 0x84 0xC4 0x04 0x44 0x86 0xC8 0x04 0x44 0x84 0xC4 0x00 0xFF 0x40 0x81 0xC4 0x04 0x44 0x84 0xC4 0x04 0x44 0x86 0xC8 0x04 0x44 0x84 0xC4 0x00 0xFF 0x40 0x81 0xC4 0x04 0x44 0x84 0xC4 0x04 0x44 0x86 0xC8 0x04 0x44 0x84 0xC4
f_REG_CMDW->(ALL, 1, 0x50, 0x44, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC5, 0x00, 0x03, 0x01, 0x56, 0xAB, 0xFC, 0x03, 0x01, 0x56, 0xAB, 0xFC, 0x03, 0x01, 0x56, 0xAB, 0xFC, 0x00, 0xFF, 0x40, 0x81, 0xC4, 0x04, 0x44, 0x84, 0xC4, 0x04, 0x44, 0x86, 0xC8, 0x04, 0x44, 0x84, 0xC4, 0x00, 0xFF, 0x40, 0x81, 0xC4, 0x04, 0x44, 0x84, 0xC4, 0x04, 0x44, 0x86, 0xC8, 0x04, 0x44, 0x84, 0xC4, 0x00, 0xFF, 0x40, 0x81, 0xC4, 0x04, 0x44, 0x84, 0xC4, 0x04, 0x44, 0x86, 0xC8, 0x04, 0x44, 0x84, 0xC4);

//mipi.write 0x15 0xB0 0x00
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x00);

//mipi.write 0x39 0xc7 0x81 0x9f 0x33 0x3b 0x92 0x00 0x00 0x00 0x44 0x01 0x12 0x02 0x53 0x03 0xfe 0x06
f_REG_CMDW->(ALL, 1, 0x50, 0x11, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC7, 0x81, 0x9F, 0x33, 0x3B, 0x92, 0x00, 0x00, 0x00, 0x44, 0x01, 0x12, 0x02, 0x53, 0x03, 0xFE, 0x06);

//mipi.write 0x15 0xB0 0x10
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x10);

//mipi.write 0x39 0xc7 0x2f 0x08 0xf9 0x0c 0x45 0x0f 0xff 0x00 0x00 0x00 0x43 0x01 0x06 0x02 0x4a 0x04
f_REG_CMDW->(ALL, 1, 0x50, 0x11, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC7, 0x2F, 0x08, 0xF9, 0x0C, 0x45, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x43, 0x01, 0x06, 0x02, 0x4A, 0x04);

//mipi.write 0x15 0xB0 0x20
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x20);

//mipi.write 0x39 0xc7 0x04 0x06 0x38 0x09 0x0b 0x0c 0x41 0x0f 0xff 0x00 0x00 0x00 0x3d 0x00 0xea 0x01
f_REG_CMDW->(ALL, 1, 0x50, 0x11, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC7, 0x04, 0x06, 0x38, 0x09, 0x0B, 0x0C, 0x41, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x3D, 0x00, 0xEA, 0x01);

//mipi.write 0x15 0xB0 0x30
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x30);

//mipi.write 0x39 0xc7 0xfd 0x03 0x7f 0x05 0x86 0x08 0x24 0x0b 0xdc 0x0f 0xff 0x10 0x10 0x10 0x10 0x10
f_REG_CMDW->(ALL, 1, 0x50, 0x11, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC7, 0xFD, 0x03, 0x7F, 0x05, 0x86, 0x08, 0x24, 0x0B, 0xDC, 0x0F, 0xFF, 0x10, 0x10, 0x10, 0x10, 0x10);

//mipi.write 0x15 0xB0 0x40
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x40);

//mipi.write 0x39 0xc7 0x10 0x10 0x10 0x10 0x41 0x90 0x04 0x80 0xF4 0x0c 0x3e 0x40 0x00 0x3c 0x00 0x38
f_REG_CMDW->(ALL, 1, 0x50, 0x11, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC7, 0x10, 0x10, 0x10, 0x10, 0x41, 0x90, 0x04, 0x80, 0xF4, 0x0C, 0x3E, 0x40, 0x00, 0x3C, 0x00, 0x38);

//mipi.write 0x15 0xB0 0x50
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x50);

//mipi.write 0x39 0xc7 0x00 0x34 0x00 0x30 0x00 0x2c 0x00 0x28 0x00 0x24 0x00 0x20 0x00 0x1c 0x00 0x18
f_REG_CMDW->(ALL, 1, 0x50, 0x11, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC7, 0x00, 0x34, 0x00, 0x30, 0x00, 0x2C, 0x00, 0x28, 0x00, 0x24, 0x00, 0x20, 0x00, 0x1C, 0x00, 0x18);

}*end
void Func_call::q_SEQUENCE_19(){

//mipi.write 0x15 0xB0 0x60
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x60);

//mipi.write 0x39 0xc7 0x00 0x14 0x00 0x10 0x00 0x0c 0x00 0x08 0x00 0x04 0x00 0x00 0x00
f_REG_CMDW->(ALL, 1, 0x50, 0x0E, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC7, 0x00, 0x14, 0x00, 0x10, 0x00, 0x0C, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00);

//mipi.write 0x15 0xB0 0x6D
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x6D);

//mipi.write 0x39 0xC7 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF # 229 240 
f_REG_CMDW->(ALL, 1, 0x50, 0x84, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

//mipi.write 0x39 0xC8 0xFF 0xFF 0xFF 0xFF 0xFE 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFC 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFD 0xFA 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFC 0xF8 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFC 0xFB 0xF6 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFB 0xFA 0xF4 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFC 0xFA 0xF9 0xF4 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFC 0xFA 0xF8 0xF4 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFB 0xF9 0xF5 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFC 0xFB 0xF6 
f_REG_CMDW->(ALL, 1, 0x50, 0x9F, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFB, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xFA, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFA, 0xF9, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFA, 0xF8, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xF9, 0xF5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xFB, 0xF6);

//mipi.write 0x15 0xB0 0x9E
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x9E);

}*end
void Func_call::q_SEQUENCE_20(){
//mipi.write 0x39 0xC8 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 
f_REG_CMDW->(ALL, 1, 0x50, 0x53, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

//mipi.write 0x39 0xC9 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFC 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFD 0xFA 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFC 0xF8 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFC 0xFB 0xF6 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFB 0xFA 0xF4 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFC 0xFA 0xF9 0xF4 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFC 0xFA 0xF8 0xE4 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFB 0xF9 0xF5 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFC 0xFB 0xF6 
f_REG_CMDW->(ALL, 1, 0x50, 0xD0, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFB, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xFA, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFA, 0xF9, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFA, 0xF8, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xF9, 0xF5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xFB, 0xF6);

//mipi.write 0x15 0xB0 0xCF
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0xCF);

//mipi.write 0x39 0xC9 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 
f_REG_CMDW->(ALL, 1, 0x50, 0x22, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xC9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);

}*end

void Func_call::q_SEQUENCE_21(){

//mipi.write 0x39 0xCA 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFC 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFD 0xFA 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFC 0xF8 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFE 0xFC 0xFB 0xF6 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFB 0xFA 0xF4 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFC 0xFA 0xF9 0xF4 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFC 0xFA 0xF8 0xE4 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFB 0xF9 0xF5 0xFF 
f_REG_CMDW->(ALL, 1, 0x50, 0xF1, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xCA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFB, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xFA, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFA, 0xF9, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFA, 0xF8, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xF9, 0xF5, 0xFF);

//mipi.write 0x39 0xCB 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFD 0xFC 0xFB 0xF6
f_REG_CMDW->(ALL, 1, 0x50, 0x11, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xCB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFC, 0xFB, 0xF6);

//mipi.write 0x39 0xB0 0x32 #IRC use band setting
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x32);

//mipi.write 0x39 0xCB 0x07 0xFF 0x06 0xEB 0x05 0x6E 0x04 0x6A 0x03 0xE1 0x03 0x2B 0x02 0xB7 0x02 0x01 0x01 0x61 0x00 0xCA 0x00 0x65 0x00 0x01
f_REG_CMDW->(ALL, 1, 0x50, 0x19, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xCB, 0x07, 0xFF, 0x06, 0xEB, 0x05, 0x6E, 0x04, 0x6A, 0x03, 0xE1, 0x03, 0x2B, 0x02, 0xB7, 0x02, 0x01, 0x01, 0x61, 0x00, 0xCA, 0x00, 0x65, 0x00, 0x01);

//mipi.write 0x39 0xB0 0x58 #Band RGB
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x58);

//mipi.write 0x39 0xCB 0xFF 0xFF 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0xFF 0xFF 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0xFF 0xFF 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
f_REG_CMDW->(ALL, 1, 0x50, 0x25, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xCB, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);


}*end



///////////////////////////////////////////

void Func_call::q_BF_FLASH_01(){
		f_REG_CMDW->(ALL, 1, 0x40, 0x51, 0x00);	
		
		f_REG_CMDW->(ALL, 1, 0x50, 0x01, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0x28);

		//mipi.write 0x39 0x2A 0x00 0x00 0x05 0x9F    # Column Address 1,440
		f_REG_CMDW->(ALL, 1, 0x50, 0x05, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0x2A, 0x00, 0x00, 0x05, 0x9F);

		//mipi.write 0x39 0x2B 0x00 0x00 0x0D 0x1F   # Page Address 3,360
		f_REG_CMDW->(ALL, 1, 0x50, 0x05, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0x2B, 0x00, 0x00, 0x0D, 0x1F);

		//mipi.write 0x15 0xb0 0x08
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x08);

		//mipi.write 0x15 0xF5 0x30
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xF5, 0x30);
}*end

void Func_call::q_BF_FLASH_02(){
		//write
		f_REG_CMDW->(ALL, 1, 0x40, 0x51, 0x00); //  LP MODE DCS 

		//mipi.write 0x15 0xB0 0x05
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x05);

		//mipi.write 0x39 0xE8 0xBB
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xE8, 0xBB);

		//mipi.write 0x15 0xB0 0x0C
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x0C);

		//mipi.write 0x39 0xE8 0x08
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xE8, 0x08);

		//mipi.write 0x15 0xB0 0x0D
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x0D);

		//mipi.write 0x39 0xE8 0x00
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xE8, 0x00);

		//mipi.write 0x15 0xB0 0x0D
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x0D);

		//mipi.write 0x39 0xE8 0x13
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xE8, 0x13);
}*end

void Func_call::q_BF_FLASH_03(){
		//4 READ Checksum
		//mipi.write 0x15 0xB0 0x05
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x05);

		//mipi.write 0x39 0xE8 0x11
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xE8, 0x11);

		//mipi.write 0x15 0xB0 0x04
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x04);

		//mipi.write 0x39 0xE8 0x00
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xE8, 0x00);

		//mipi.write 0x15 0xB0 0x04
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x04);

		//mipi.write 0x39 0xE8 0x18
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xE8, 0x18);

		//mipi.write 0x39 0xB0 20
		f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
		f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x14);
}*end
void Func_call::q_FLASH_01(){

//mipi.write.hs 0x39 0x2C 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
f_REG_CMDW->(ALL, 1, 0x40, 0xC0, 0x00);
f_REG_CMDW->(ALL, 1, 0x5D, 0x39, 0x00);
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x2C, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08);

//mipi.write.hs 0x39 0x3C 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10);



}*end

void Func_call::q_FLASH_02(){
//mipi.write.hs 0x39 0x3C 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08);
//mipi.write.hs 0x39 0x3C 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10);



}*end

void Func_call::q_FLASH_03(){
//mipi.write.hs 0x39 0x3C 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08);

//mipi.write.hs 0x39 0x3C 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0);

}*end

void Func_call::q_FLASH_04(){

//mipi.write.hs 0x39 0x3C 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0);

//mipi.write.hs 0x39 0x3C 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70);



}*end

void Func_call::q_FLASH_05(){
//mipi.write.hs 0x39 0x3C 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40);
//mipi.write.hs 0x39 0x3C 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10);



}*end

void Func_call::q_FLASH_06(){
//mipi.write.hs 0x39 0x3C 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08);

//mipi.write.hs 0x39 0x3C 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10);

}*end

void Func_call::q_FLASH_07(){

//mipi.write.hs 0x39 0x3C 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08);

//mipi.write.hs 0x39 0x3C 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10);
}*end

void Func_call::q_FLASH_08(){
//mipi.write.hs 0x39 0x3C 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08);
//mipi.write.hs 0x39 0x3C 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0);



}*end

void Func_call::q_FLASH_09(){
//mipi.write.hs 0x39 0x3C 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE8 0xF0 0xF8 0xFF 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE8, 0xF0, 0xF8, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0);

//mipi.write.hs 0x39 0x3C 0xB8 0xC0 0xC8 0xD0 0xD8 0xE4 0xEC 0xF4 0xFC 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE4, 0xEC, 0xF4, 0xFC, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80);


}*end

void Func_call::q_FLASH_10(){

//mipi.write.hs 0x39 0x3C 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE8 0xF0 0xF8 0xFF 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE8, 0xF0, 0xF8, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50);

//mipi.write.hs 0x39 0x3C 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE4 0xEC 0xF4 0xFC 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE4, 0xEC, 0xF4, 0xFC, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20);


}*end

void Func_call::q_FLASH_11(){

//mipi.write.hs 0x39 0x3C 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xF0 0xF8 0xFF 0xFF 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xF0, 0xF8, 0xFF, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08);
//mipi.write.hs 0x39 0x3C 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE8 0xF0 0xF8 0xFF 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE8, 0xF0, 0xF8, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10);


}*end

void Func_call::q_FLASH_12(){

//mipi.write.hs 0x39 0x3C 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xF0 0xF8 0xFF 0xFF 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xF0, 0xF8, 0xFF, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08);

//mipi.write.hs 0x39 0x3C 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE8 0xF0 0xF8 0xFF 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE8, 0xF0, 0xF8, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10);

}*end

void Func_call::q_FLASH_13(){
//mipi.write.hs 0x39 0x3C 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x08 0x10 0x18 0x20 0x28 0x30 0x38 0x40 0x48 0x50 0x58 0x60 0x68 0x70 0x78 0x80 0x88 0x90 0x98 0xA0 0xA8 0xB0 0xB8 0xC0 0xC8 0xD0 0xD8 0xE0 0xE8 0xF0 0xF8 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x10 0x3A 0x58 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
f_REG_CMDW->(ALL, 1, 0x50, 0xB5, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x3C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x88, 0x90, 0x98, 0xA0, 0xA8, 0xB0, 0xB8, 0xC0, 0xC8, 0xD0, 0xD8, 0xE0, 0xE8, 0xF0, 0xF8, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x3A, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
}*end

///////////////////////////////////////////

void Func_call::q_DISPLAY_ON(){

//mipi.write 0x05 0x29 # Display on
f_REG_CMDW->(ALL, 1, 0x50, 0x01, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x29);
}*end

void Func_call::q_AUTOCODE_01(){

//mipi.write 0x39 0x7F 0x5A 0x5A # UCS Access
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x7F, 0x5A, 0x5A);

//mipi.write 0x39 0xF0 0x5A 0x5A # MCS Access LV1
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xF0, 0x5A, 0x5A);

//mipi.write 0x39 0xF1 0x5A 0x5A # MCS Access LV2
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xF1, 0x5A, 0x5A);

//mipi.write 0x39 0xF2 0x5A 0x5A # MCS Access LV3
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xF2, 0x5A, 0x5A);

//mipi.write 0x15 0xB0 0x7D
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xB0, 0x7D);

//mipi.write 0x39 0xE5 0x00 0x13 0x00 0x13 0x53 0x53 # ERA, OD, DGMA, POCB Load En
f_REG_CMDW->(ALL, 1, 0x50, 0x07, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE5, 0x00, 0x13, 0x00, 0x13, 0x53, 0x53);

//mipi.write 0x39 0xE8 0x00 0x00 0x00 0x00 # Flash Access Enable(ERA, OD, DGMA, POCB)
f_REG_CMDW->(ALL, 1, 0x50, 0x05, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0xE8, 0x00, 0x00, 0x00, 0x00);

//mipi.write 0x39 0x02 0x01 # DSC On / Off: 0x00
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x02, 0x01);

//mipi.write 0x39 0x59 0x00 # Mode Select, 00: CMD DSC, 01: CMD DSC, 02: Video DSC with RAM, 03: Video DSC without RAM
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x59, 0x00);

//mipi.write 0x39 0x2A 0x00 0x00 0x04 0xCb # Column Address 1,228
f_REG_CMDW->(ALL, 1, 0x50, 0x05, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x2A, 0x00, 0x00, 0x04, 0xCB);

//mipi.write 0x39 0x2B 0x00 0x00 0x0A 0x8b # Page Address 2,700
f_REG_CMDW->(ALL, 1, 0x50, 0x05, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x2B, 0x00, 0x00, 0x0A, 0x8B);

//mipi.write 0x39 0x51 0x0D 0xD6 # DBV Setting : FFF(HBM), DD6, BB8, 992, 7EE, 6A4, 578, 41A, 2C2, 1C2, 0C8, 001
f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x51, 0x0D, 0xD6);

//mipi.write 0x39 0x53 0x20 # 2: 51h on, Dimming Off / 0: Dimming Off, 8: Dimming On
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x53, 0x20);

//mipi.write 0x39 0x55 0x00 # PLC off
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x55, 0x00);

//mipi.write 0x39 0x57 0x00 0x12 0x81 0xF8 0xED 0x00 0x00  # Normal Mode (Simple PPA+IRC+OD+POCB) <ver0.7_200924>
f_REG_CMDW->(ALL, 1, 0x50, 0x08, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x57, 0x00, 0x12, 0x81, 0xF8, 0xED, 0x00, 0x00);

//mipi.write 0x39 0x58 0x00 0x00 0x00 0xF8 0xFF 0x01 0x00 # AoD Mode : all off
f_REG_CMDW->(ALL, 1, 0x50, 0x08, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x58, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x01, 0x00);

//mipi.write 0x39 0x76 0x00 # Go to HFR60Hz, normal sel = set1
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x76, 0x00);



//mipi.write 0x0A 0x11 0x00 0x00 0x89 0x30 0x80 0x0A 0x8C 0x04 0xCC 0x00 0x1E 0x02 0x66 0x02 0x66 0x02 0x00 0x02 0x33 0x00 0x20 0x03 0x13 0x00 0x08 0x00 0x0C 0x03 0x50 0x02 0xFA 0x18 0x00 0x10 0xF0 0x03 0x0C 0x20 0x00 0x06 0x0B 0x0B 0x33 0x0E 0x1C 0x2A 0x38 0x46 0x54 0x62 0x69 0x70 0x77 0x79 0x7B 0x7D 0x7E 0x01 0x02 0x01 0x00 0x09 0x40 0x09 0xBE 0x19 0xFC 0x19 0xFA 0x19 0xF8 0x1A 0x38 0x1A 0x78 0x1A 0xB6 0x2A 0xF6 0x2B 0x34 0x2B 0x74 0x3B 0x74 0x6B 0xF4 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
f_REG_CMDW->(ALL, 1, 0x40, 0xC1, 0x00);
f_REG_CMDW->(ALL, 1, 0x5D, 0x0A, 0x00);
f_REG_CMDW->(ALL, 1, 0x50, 0x80, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x11, 0x00, 0x00, 0x89, 0x30, 0x80, 0x0A, 0x8C, 0x04, 0xCC, 0x00, 0x1E, 0x02, 0x66, 0x02, 0x66, 0x02, 0x00, 0x02, 0x33, 0x00, 0x20, 0x03, 0x13, 0x00, 0x08, 0x00, 0x0C, 0x03, 0x50, 0x02, 0xFA, 0x18, 0x00, 0x10, 0xF0, 0x03, 0x0C, 0x20, 0x00, 0x06, 0x0B, 0x0B, 0x33, 0x0E, 0x1C, 0x2A, 0x38, 0x46, 0x54, 0x62, 0x69, 0x70, 0x77, 0x79, 0x7B, 0x7D, 0x7E, 0x01, 0x02, 0x01, 0x00, 0x09, 0x40, 0x09, 0xBE, 0x19, 0xFC, 0x19, 0xFA, 0x19, 0xF8, 0x1A, 0x38, 0x1A, 0x78, 0x1A, 0xB6, 0x2A, 0xF6, 0x2B, 0x34, 0x2B, 0x74, 0x3B, 0x74, 0x6B, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

f_REG_CMDW->(ALL, 1, 0x40, 0x51, 0x00); //  LP MODE DCS 
f_REG_CMDW->(ALL, 1, 0x5B, 0x00, 0x00); // VC setting. 

//mipi.write 0x15 0x35 0x00 # TE On
f_REG_CMDW->(ALL, 1, 0x50, 0x02, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x35, 0x00);

//delay 100
f_DELAY_MS->(100);
//delay 10
f_DELAY_MS->(10);
//mipi.write 0x05 0x11 # Sleep out
f_REG_CMDW->(ALL, 1, 0x50, 0x01, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x11);

//delay 50
f_DELAY_MS->(50);
//mipi.write 0x05 0x29 # Display on
f_REG_CMDW->(ALL, 1, 0x50, 0x01, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x29);

}*end

void Func_call::q_AOD_IN(){
f_REG_CMDW->(ALL, 1, 0x40, 0x51, 0x00); //  LP MODE DCS 


//mipi.write 0x39 0x7F 0x5A 0x5A 	# UCS Access
//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0x7F, 0x5A, 0x5A);

//mipi.write 0x39 0xF0 0x5A 0x5A 	# MCS Access LV1
//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0xF0, 0x5A, 0x5A);

//mipi.write 0x39 0xF1 0x5A 0x5A 	# MCS Access LV2
//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0xF1, 0x5A, 0x5A);

//mipi.write 0x39 0xF2 0x5A 0x5A 	# MCS Access LV3
//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0xF2, 0x5A, 0x5A);

//mipi.write 0x39 0x51 0x07 0xFF 		# DBV Setting, 7FF(HBM), 69A, 483, 31F, 295, 222, 185, 10D, 0AD, 001	#200203 v0.9
//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0x51, 0x07, 0xFF);

//mipi.write 0x05 0x39 #AOD On
//f_DELAY_MS->(50);
f_REG_CMDW->(ALL, 1, 0x50, 0x01, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x39);
f_DELAY_MS->(120);

// Data Rate=>450Mbps => 20.02.18 
//f_REG_CMDW->(ALL, 1, 0x20, 0xCB, 0x02);
//f_REG_CMDW->(ALL, 1, 0x21, 0x00, 0x4C);
//f_REG_CMDW->(ALL, 1, 0x22, 0xDA, 0x06);
//f_REG_CMDW->(ALL, 1, 0x23, 0x00, 0x18);
//f_REG_CMDW->(ALL, 1, 0x24, 0x05, 0x09);
//f_REG_CMDW->(ALL, 1, 0x25, 0x41, 0x10);
//f_REG_CMDW->(ALL, 1, 0x26, 0x37, 0x00);
			
	//-----------------------------------------------------------------------------------------------------------------------
	// Global Timing (450Mbps) => 20.02.18
	//f_REG_CMDW->(ALL, 1, 0x34, 0x08, 0x08);

}*end

void Func_call::q_AOD_OUT(){
f_REG_CMDW->(ALL, 1, 0x40, 0x51, 0x00); //  LP MODE DCS 


//mipi.write 0x39 0x7F 0x5A 0x5A 	# UCS Access
//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0x7F, 0x5A, 0x5A);

//mipi.write 0x39 0xF0 0x5A 0x5A 	# MCS Access LV1
//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0xF0, 0x5A, 0x5A);

//mipi.write 0x39 0xF1 0x5A 0x5A 	# MCS Access LV2
//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0xF1, 0x5A, 0x5A);

//mipi.write 0x39 0xF2 0x5A 0x5A 	# MCS Access LV3
//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0xF2, 0x5A, 0x5A);

//mipi.write 0x39 0x51 0x07 0xFF 		# DBV Setting, 7FF(HBM), 69A, 483, 31F, 295, 222, 185, 10D, 0AD, 001	#200203 v0.9
//f_REG_CMDW->(ALL, 1, 0x50, 0x03, 0x00);
//f_REG_CMDW->(ALL, 1, 0x53, 0x51, 0x07, 0xFF);

//mipi.write 0x05 0x38 #AOD Off
//f_DELAY_MS->(50);
f_REG_CMDW->(ALL, 1, 0x50, 0x01, 0x00);
f_REG_CMDW->(ALL, 1, 0x53, 0x38);
f_DELAY_MS->(120);

// Data Rate=>900Mbps => 20.02.18 
	//f_REG_CMDW->(ALL, 1, 0x20, 0x45, 0x01);			
	//f_REG_CMDW->(ALL, 1, 0x21, 0x00, 0x2C);			
	//f_REG_CMDW->(ALL, 1, 0x22, 0xDA, 0x06);			
	//f_REG_CMDW->(ALL, 1, 0x23, 0x00, 0x18);			
	//f_REG_CMDW->(ALL, 1, 0x24, 0x03, 0x09);			
	//f_REG_CMDW->(ALL, 1, 0x25, 0x41, 0x10);			
	//f_REG_CMDW->(ALL, 1, 0x26, 0x37, 0x00);			
	//-----------------------------------------------------------------------------------------------------------------------
	// Global Timing (900Mbps) => 20.02.18
	//f_REG_CMDW->(ALL, 1, 0x34, 0x06, 0x06);

}*end

void Func_call::q_VDDI_uA(){	

f_DELAY_MS->(1000);		
f_IEXT->(ALL, 3, 5000, 000);  
f_DELAY_MS->(1000);

}*end

void Func_call::q_VDDI_mA(){	

f_IEXT->(ALL, 2, 180000, 000);  

}*end

//=============================================

:#end_Script_code
